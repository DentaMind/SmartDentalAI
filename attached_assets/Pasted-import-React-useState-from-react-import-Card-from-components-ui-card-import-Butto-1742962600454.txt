import React, { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

const assistantModules = [
  // Existing modules...
  {
    title: "Ultrasonic & Autoclave Maintenance",
    description: "Daily, weekly, and monthly care protocols to ensure sterilization equipment runs efficiently and safely.",
    steps: [
      "Check ultrasonic fluid level daily and replace if cloudy or contaminated.",
      "Run the ultrasonic for 10 minutes to loosen debris before brushing instruments.",
      "Rinse and dry instruments before bagging and placing into the autoclave.",
      "Use distilled water in the autoclave only. Do not overfill the tank.",
      "Perform a spore test weekly and log results per OSHA/CDC guidelines.",
      "Clean autoclave chamber weekly with manufacturer-approved solution.",
      "Record autoclave cycle data (time/temp/date/load ID) for every use."
    ],
    image: "/images/autoclave_maintenance.png",
    quiz: [
      {
        question: "What fluid should always be used in the autoclave?",
        options: ["Tap water", "Filtered water", "Distilled water", "Boiled water"],
        answer: "Distilled water"
      },
      {
        question: "How often should you perform a spore test?",
        options: ["Monthly", "Weekly", "Daily", "Only after repair"],
        answer: "Weekly"
      },
      {
        question: "What is the purpose of the ultrasonic cleaner?",
        options: ["Sterilizes instruments", "Loosens debris with vibration", "Rinses off soap", "Dry cycles instruments"],
        answer: "Loosens debris with vibration"
      },
      {
        question: "When should you replace ultrasonic fluid?",
        options: ["Weekly", "When it looks cloudy or contaminated", "After every patient", "Never"],
        answer: "When it looks cloudy or contaminated"
      },
      {
        question: "What must be recorded from every autoclave cycle?",
        options: ["Music played", "Instrument type", "Date, time, temperature, load ID", "Patient name"],
        answer: "Date, time, temperature, load ID"
      },
      {
        question: "What is the risk of overfilling the autoclave tank?",
        options: ["Nothing", "Better sterilization", "Equipment damage and steam issues", "It helps it run quieter"],
        answer: "Equipment damage and steam issues"
      },
      {
        question: "Why should instruments be rinsed before bagging?",
        options: ["Looks nice", "Avoids cross-contamination and spotting", "Adds weight", "No reason"],
        answer: "Avoids cross-contamination and spotting"
      },
      {
        question: "What is the best way to clean the autoclave chamber?",
        options: ["Bleach wipes", "Soapy water", "Manufacturer-approved cleaner", "Hand sanitizer"],
        answer: "Manufacturer-approved cleaner"
      },
      {
        question: "How long should the ultrasonic run before brushing?",
        options: ["30 seconds", "1 minute", "10 minutes", "Until it's noisy"],
        answer: "10 minutes"
      },
      {
        question: "Where should you document weekly spore test results?",
        options: ["Anywhere", "Sticky note", "Official sterilization log", "Supply closet"],
        answer: "Official sterilization log"
      }
    ]
  }
];

export default function AssistantTab() {
  const [quizResults, setQuizResults] = useState({});

  const handleQuizSubmit = (title, score) => {
    setQuizResults(prev => ({ ...prev, [title]: score }));
  };

  return (
    <div className="p-6 grid gap-6">
      {assistantModules.map((module, idx) => (
        <Card key={idx} className="p-4 rounded-2xl shadow">
          <h2 className="text-xl font-bold mb-2">{module.title}</h2>
          <p className="mb-4">{module.description}</p>
          <img src={module.image} alt={module.title} className="mb-4 w-full max-w-md rounded" />
          <ul className="list-disc ml-6 mb-4">
            {module.steps.map((step, i) => (
              <li key={i}>{step}</li>
            ))}
          </ul>
          <Quiz 
            module={module.title} 
            questions={module.quiz} 
            onSubmit={handleQuizSubmit} 
          />
          {quizResults[module.title] >= 90 && (
            <p className="text-green-600 font-semibold mt-2">âœ… Passed with {quizResults[module.title]}%</p>
          )}
        </Card>
      ))}
    </div>
  );
}

function Quiz({ module, questions, onSubmit }) {
  const [answers, setAnswers] = useState({});
  const [submitted, setSubmitted] = useState(false);
  const [score, setScore] = useState(null);

  const handleChange = (qIndex, value) => {
    setAnswers(prev => ({ ...prev, [qIndex]: value }));
  };

  const handleSubmit = () => {
    let correct = 0;
    questions.forEach((q, i) => {
      if (answers[i] === q.answer) correct++;
    });
    const result = Math.round((correct / questions.length) * 100);
    setScore(result);
    setSubmitted(true);
    onSubmit(module, result);
  };

  return (
    <div className="mt-6">
      <h3 className="font-semibold text-lg mb-2">Quiz</h3>
      {questions.map((q, i) => (
        <div key={i} className="mb-4">
          <p className="mb-1 font-medium">{i + 1}. {q.question}</p>
          {q.options.map((opt, j) => (
            <label key={j} className="block">
              <input
                type="radio"
                name={`q-${module}-${i}`}
                value={opt}
                onChange={() => handleChange(i, opt)}
                disabled={submitted}
              /> {opt}
            </label>
          ))}
        </div>
      ))}
      {!submitted && (
        <Button onClick={handleSubmit}>Submit Quiz</Button>
      )}
      {submitted && (
        <p className="mt-2 font-semibold">Score: {score}%</p>
      )}
    </div>
  );
}
