// ðŸ’Š PatientTreatmentEditor - AI-generated treatment plan with provider control

import React, { useEffect, useState } from "react";
import axios from "axios";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/components/ui/use-toast";
import { Pencil } from "lucide-react";

export default function PatientTreatmentEditor({ patientId }: { patientId: string }) {
  const [plan, setPlan] = useState<any>(null);
  const [editing, setEditing] = useState(false);
  const [editedPlan, setEditedPlan] = useState<string>("");
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    axios.get(`/api/treatment-plans/${patientId}`).then((res) => {
      setPlan(res.data);
      setEditedPlan(res.data?.ai_draft || "");
    });
  }, [patientId]);

  const saveEdits = async () => {
    setLoading(true);
    try {
      await axios.post(`/api/treatment-plans/${patientId}/approve`, {
        approved_plan: editedPlan,
      });
      toast({
        title: "Treatment Plan Saved",
        description: "Your treatment plan has been approved and saved."
      });
      setPlan({ ...plan, approved_plan: editedPlan });
      setEditing(false);
    } catch {
      toast({ title: "Error", description: "Could not save treatment plan." });
    } finally {
      setLoading(false);
    }
  };

  if (!plan) return <div>Loading treatment plan...</div>;

  return (
    <Card className="p-4 space-y-4">
      <h2 className="text-xl font-semibold">AI Treatment Plan</h2>
      <p className="text-sm text-muted-foreground">Confidence: {plan.confidence}%</p>
      <p className="text-sm text-muted-foreground mb-2">Reasoning: {plan.reasoning}</p>

      {editing ? (
        <Textarea
          value={editedPlan}
          onChange={(e) => setEditedPlan(e.target.value)}
          className="min-h-[120px]"
        />
      ) : (
        <div className="border rounded p-3 bg-muted/20 whitespace-pre-wrap">
          {plan.approved_plan || plan.ai_draft}
        </div>
      )}

      <div className="flex gap-3">
        {editing ? (
          <Button onClick={saveEdits} disabled={loading}>
            {loading ? "Saving..." : "Save Plan"}
          </Button>
        ) : (
          <Button variant="outline" onClick={() => setEditing(true)}>
            <Pencil className="w-4 h-4 mr-1" /> Edit Plan
          </Button>
        )}
      </div>
    </Card>
  );
}