// âœ… Continuing with Restorative and Perio Chart Integration + Optional X-ray View Toggle

import React, { useState } from "react";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Card } from "@/components/ui/card";
import RestorativeToothChart from "@/components/charting/RestorativeToothChart";
import PerioProbingTable from "@/components/charting/PerioProbingTable";
import { AutoNoteBox } from "@/components/patients/notes/AutoNoteBox";
import PatientXrays from "@/components/patients/patient-xrays";
import { Switch } from "@/components/ui/switch";

export default function PatientChartingPanel({ patientId }: { patientId: string }) {
  const [selectedTooth, setSelectedTooth] = useState<string | null>(null);
  const [restorativeData, setRestorativeData] = useState<Record<string, { surfaces: string[], procedures: string[] }>>({});
  const [perioData, setPerioData] = useState<Record<string, { probing: number[], bop: boolean[], mobility: number, furcation: number }>>({});
  const [showChartingOverlay, setShowChartingOverlay] = useState(false);

  const handleRestorativeClick = (tooth: string, surface: string) => {
    const current = restorativeData[tooth]?.surfaces || [];
    const updated = current.includes(surface)
      ? current.filter((s) => s !== surface)
      : [...current, surface];
    setRestorativeData((prev) => ({
      ...prev,
      [tooth]: { ...prev[tooth], surfaces: updated, procedures: prev[tooth]?.procedures || [] }
    }));
  };

  const handleProcedureClick = (tooth: string, procedure: string) => {
    const current = restorativeData[tooth]?.procedures || [];
    const updated = current.includes(procedure)
      ? current.filter((p) => p !== procedure)
      : [...current, procedure];
    setRestorativeData((prev) => ({
      ...prev,
      [tooth]: { ...prev[tooth], procedures: updated, surfaces: prev[tooth]?.surfaces || [] }
    }));
  };

  const handlePerioUpdate = (
    tooth: string,
    probing: number[],
    bop: boolean[],
    mobility: number,
    furcation: number
  ) => {
    setPerioData((prev) => ({
      ...prev,
      [tooth]: { probing, bop, mobility, furcation }
    }));
  };

  return (
    <Tabs defaultValue="xray" className="w-full">
      <TabsList className="mb-4">
        <TabsTrigger value="xray">X-ray View</TabsTrigger>
        <TabsTrigger value="restorative">Restorative Chart</TabsTrigger>
        <TabsTrigger value="perio">Perio Chart</TabsTrigger>
        <TabsTrigger value="notes">Auto Notes</TabsTrigger>
      </TabsList>

      <div className="flex items-center justify-end mb-2">
        <span className="mr-2 text-sm text-gray-600">Show Charting Overlay</span>
        <Switch checked={showChartingOverlay} onCheckedChange={setShowChartingOverlay} />
      </div>

      <TabsContent value="xray">
        <Card className="p-4">
          <PatientXrays patientId={patientId} showChartingOverlay={showChartingOverlay} />
        </Card>
      </TabsContent>

      <TabsContent value="restorative">
        {showChartingOverlay && (
          <Card className="p-4">
            <RestorativeToothChart
              selectedTooth={selectedTooth}
              onSelectTooth={setSelectedTooth}
              chartData={restorativeData}
              onSurfaceClick={handleRestorativeClick}
              onProcedureClick={handleProcedureClick}
            />
          </Card>
        )}
      </TabsContent>

      <TabsContent value="perio">
        {showChartingOverlay && (
          <Card className="p-4">
            <PerioProbingTable perioData={perioData} onUpdate={handlePerioUpdate} />
          </Card>
        )}
      </TabsContent>

      <TabsContent value="notes">
        <AutoNoteBox
          source="charting"
          chartData={{ restorative: restorativeData, perio: perioData }}
          patientId={patientId}
          title="Charting Notes"
        />
      </TabsContent>
    </Tabs>
  );
}