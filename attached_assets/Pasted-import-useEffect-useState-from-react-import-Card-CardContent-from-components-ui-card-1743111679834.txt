import { useEffect, useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { useSession } from "@/lib/useSession";
import { Loader2 } from "lucide-react";

interface Diagnosis {
  id: string;
  title: string;
  reasoning: string;
  confidence: number;
  createdAt: string;
  approved: boolean;
  approvedBy?: string;
  feedback?: string;
}

interface Props {
  patientId: string;
}

export default function DiagnosisFeedbackUI({ patientId }: Props) {
  const { user } = useSession();
  const [diagnoses, setDiagnoses] = useState<Diagnosis[]>([]);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    fetch(`/api/diagnoses/${patientId}`)
      .then((res) => res.json())
      .then(setDiagnoses)
      .finally(() => setLoading(false));
  }, [patientId]);

  const submitFeedback = async (id: string, feedback: string, approve: boolean) => {
    setSubmitting(true);
    await fetch(`/api/diagnoses/${id}/feedback`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ feedback, approved: approve }),
    });
    const res = await fetch(`/api/diagnoses/${patientId}`);
    const updated = await res.json();
    setDiagnoses(updated);
    setSubmitting(false);
  };

  if (loading) return <p className="text-sm text-muted-foreground">Loading diagnosis...</p>;

  return (
    <div className="space-y-4">
      {diagnoses.map((dx) => (
        <Card key={dx.id} className="bg-muted/40">
          <CardContent className="p-4 space-y-2">
            <h3 className="font-semibold text-lg">{dx.title}</h3>
            <p className="text-sm text-muted-foreground">{dx.reasoning}</p>
            <p className="text-sm">Confidence: {dx.confidence}%</p>
            <p className="text-xs text-muted-foreground">Created: {new Date(dx.createdAt).toLocaleString()}</p>

            {dx.approved ? (
              <p className="text-green-600 text-sm">âœ… Approved by {dx.approvedBy}</p>
            ) : (
              <div className="space-y-2">
                <Textarea placeholder="Add feedback (optional)" id={`feedback-${dx.id}`} />
                <div className="flex gap-2">
                  <Button
                    size="sm"
                    disabled={submitting}
                    onClick={() =>
                      submitFeedback(
                        dx.id,
                        (document.getElementById(`feedback-${dx.id}`) as HTMLTextAreaElement)?.value || "",
                        true
                      )
                    }
                  >
                    {submitting ? <Loader2 className="animate-spin h-4 w-4" /> : "Approve"}
                  </Button>
                  <Button
                    size="sm"
                    variant="destructive"
                    disabled={submitting}
                    onClick={() =>
                      submitFeedback(
                        dx.id,
                        (document.getElementById(`feedback-${dx.id}`) as HTMLTextAreaElement)?.value || "",
                        false
                      )
                    }
                  >
                    Reject
                  </Button>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      ))}
    </div>
  );
}