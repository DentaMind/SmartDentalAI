import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { getPatientNotes, saveNoteDraft, approveNote } from '@/lib/api';

interface Note {
  id: string;
  content: string;
  approved: boolean;
  createdAt: string;
  provider: string;
  procedure?: string;
  diagnosis?: string;
}

interface PatientNotesProps {
  patientId: string;
}

export default function PatientNotes({ patientId }: PatientNotesProps) {
  const [notes, setNotes] = useState<Note[]>([]);
  const [editingNote, setEditingNote] = useState<string | null>(null);
  const [editedContent, setEditedContent] = useState<string>('');

  useEffect(() => {
    async function fetchNotes() {
      const data = await getPatientNotes(patientId);
      setNotes(data);
    }
    fetchNotes();
  }, [patientId]);

  const handleEdit = (note: Note) => {
    setEditingNote(note.id);
    setEditedContent(note.content);
  };

  const handleSave = async (noteId: string) => {
    await saveNoteDraft(noteId, editedContent);
    const updatedNotes = notes.map(note =>
      note.id === noteId ? { ...note, content: editedContent } : note
    );
    setNotes(updatedNotes);
    setEditingNote(null);
  };

  const handleApprove = async (noteId: string) => {
    await approveNote(noteId);
    const updatedNotes = notes.map(note =>
      note.id === noteId ? { ...note, approved: true } : note
    );
    setNotes(updatedNotes);
  };

  return (
    <div className="space-y-6">
      <h2 className="text-xl font-semibold">Patient Notes</h2>
      {notes.map(note => (
        <div
          key={note.id}
          className={`rounded-lg border p-4 shadow-sm ${note.approved ? 'bg-white' : 'bg-yellow-50'}`}
        >
          <p className="text-sm text-gray-500 mb-2">
            {new Date(note.createdAt).toLocaleString()} â€¢ Provider: {note.provider}
          </p>

          {editingNote === note.id ? (
            <Textarea
              value={editedContent}
              onChange={e => setEditedContent(e.target.value)}
              className="mb-2"
            />
          ) : (
            <p className="whitespace-pre-wrap mb-2">{note.content}</p>
          )}

          {!note.approved && (
            <div className="flex gap-2">
              {editingNote === note.id ? (
                <>
                  <Button onClick={() => handleSave(note.id)} size="sm">
                    Save
                  </Button>
                  <Button onClick={() => setEditingNote(null)} variant="outline" size="sm">
                    Cancel
                  </Button>
                </>
              ) : (
                <>
                  <Button onClick={() => handleEdit(note)} variant="outline" size="sm">
                    Edit
                  </Button>
                  <Button onClick={() => handleApprove(note.id)} size="sm">
                    Approve & Post
                  </Button>
                </>
              )}
            </div>
          )}
        </div>
      ))}
    </div>
  );
}