import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card';
import { useUser } from '@/hooks/use-user';
import { useParams } from 'wouter';

interface Note {
  id: string;
  content: string;
  finalized: boolean;
  provider: string;
  timestamp: string;
}

export default function PatientNotes() {
  const { user } = useUser();
  const { id } = useParams();
  const [notes, setNotes] = useState<Note[]>([]);
  const [newNote, setNewNote] = useState('');

  useEffect(() => {
    fetch(`/api/patients/${id}/notes`)
      .then((res) => res.json())
      .then((data) => setNotes(data));
  }, [id]);

  const handleSave = async () => {
    const noteData = {
      content: newNote,
      provider: user?.name || 'Unknown',
    };
    const res = await fetch(`/api/patients/${id}/notes`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(noteData),
    });
    const savedNote = await res.json();
    setNotes((prev) => [savedNote, ...prev]);
    setNewNote('');
  };

  const handleFinalize = async (noteId: string) => {
    await fetch(`/api/patients/${id}/notes/${noteId}/finalize`, {
      method: 'POST',
    });
    setNotes((prev) =>
      prev.map((note) =>
        note.id === noteId ? { ...note, finalized: true } : note
      )
    );
  };

  const renderTemplate = () => {
    const template = `Chief Complaint: \nMedical History: \nDental History: \nClinical Findings: \nRadiographic Findings: \nDiagnosis: \nTreatment Plan: \nPatient Education: \nFollow-Up:`;
    setNewNote(template);
  };

  const handleVoiceToText = async () => {
    const res = await fetch(`/api/ai/voice-transcription`, {
      method: 'POST',
      body: JSON.stringify({ patientId: id }),
    });
    const { transcription } = await res.json();
    setNewNote(transcription);
  };

  return (
    <div className="space-y-4 p-4">
      <Card>
        <CardHeader>
          <CardTitle>New Note</CardTitle>
        </CardHeader>
        <CardContent>
          <Textarea
            rows={10}
            placeholder="Enter note here..."
            value={newNote}
            onChange={(e) => setNewNote(e.target.value)}
          />
        </CardContent>
        <CardFooter className="flex justify-between">
          <div className="space-x-2">
            <Button onClick={renderTemplate}>Insert Exam Template</Button>
            <Button onClick={handleVoiceToText}>Voice-to-Text</Button>
          </div>
          <Button onClick={handleSave}>Save Note</Button>
        </CardFooter>
      </Card>

      {notes.map((note) => (
        <Card key={note.id} className="border-2">
          <CardHeader>
            <CardTitle>
              {note.finalized ? 'Finalized Note' : 'Draft Note'} â€“ {note.provider} @ {note.timestamp}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <Textarea
              rows={8}
              value={note.content}
              readOnly={note.finalized}
              onChange={(e) => {
                const content = e.target.value;
                setNotes((prev) =>
                  prev.map((n) => (n.id === note.id ? { ...n, content } : n))
                );
              }}
            />
          </CardContent>
          {!note.finalized && (
            <CardFooter className="justify-end">
              <Button onClick={() => handleFinalize(note.id)}>Finalize</Button>
            </CardFooter>
          )}
        </Card>
      ))}
    </div>
  );
}