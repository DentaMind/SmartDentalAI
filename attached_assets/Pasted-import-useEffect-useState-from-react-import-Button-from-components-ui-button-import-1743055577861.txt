import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";

interface Note {
  id: number;
  content: string;
  createdAt: string;
  approved: boolean;
  provider: string;
}

interface PatientNotesDisplayProps {
  patientId: number;
}

export default function PatientNotesDisplay({ patientId }: PatientNotesDisplayProps) {
  const [notes, setNotes] = useState<Note[]>([]);
  const [editingNoteId, setEditingNoteId] = useState<number | null>(null);
  const [editedContent, setEditedContent] = useState<string>("");

  useEffect(() => {
    fetch(`/api/patient-notes/${patientId}`)
      .then(res => res.json())
      .then(data => setNotes(data))
      .catch(err => console.error("Failed to load notes:", err));
  }, [patientId]);

  const handleEditClick = (note: Note) => {
    setEditingNoteId(note.id);
    setEditedContent(note.content);
  };

  const handleSave = async () => {
    const response = await fetch(`/api/patient-notes/${editingNoteId}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ content: editedContent }),
    });
    if (response.ok) {
      setNotes(prev => prev.map(n => n.id === editingNoteId ? { ...n, content: editedContent } : n));
      setEditingNoteId(null);
    }
  };

  const handleApprove = async (noteId: number) => {
    const response = await fetch(`/api/patient-notes/approve/${noteId}`, {
      method: "POST"
    });
    if (response.ok) {
      setNotes(prev => prev.map(n => n.id === noteId ? { ...n, approved: true } : n));
    }
  };

  return (
    <div className="space-y-4">
      <h2 className="text-lg font-semibold">Patient Notes</h2>
      {notes.map(note => (
        <div key={note.id} className="p-4 rounded border shadow-sm">
          <div className="text-sm text-gray-500">Provider: {note.provider} â€¢ {new Date(note.createdAt).toLocaleString()}</div>
          {editingNoteId === note.id ? (
            <>
              <Textarea
                value={editedContent}
                onChange={e => setEditedContent(e.target.value)}
              />
              <Button className="mt-2" onClick={handleSave}>Save</Button>
            </>
          ) : (
            <p className="mt-2 whitespace-pre-line">{note.content}</p>
          )}

          {!note.approved && (
            <div className="mt-2 space-x-2">
              <Button onClick={() => handleEditClick(note)}>Edit</Button>
              <Button variant="outline" onClick={() => handleApprove(note.id)}>Approve</Button>
            </div>
          )}

          {note.approved && <div className="mt-2 text-green-600 font-medium">Approved</div>}
        </div>
      ))}
    </div>
  );
}