import React, { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

const assistantModules = [
  // Existing modules...
  {
    title: "Technology & Charting in DentaMind",
    description: "How to properly document patient information, navigate the DentaMind interface, and ensure HIPAA-compliant charting.",
    steps: [
      "Log in using secure credentials — do not share login info.",
      "Navigate to the patient dashboard using the search bar or daily schedule.",
      "Update vitals, chief complaint, and notes accurately.",
      "Use templated phrases for speed, but always customize when needed.",
      "Avoid entering PHI in public notes; use designated secure sections.",
      "Always log out or lock the screen when stepping away.",
      "Double-check chart entries before saving."
    ],
    image: "/images/charting.png",
    quiz: [
      {
        question: "Why should you never share your DentaMind login?",
        options: ["It’s inconvenient", "To maintain security and HIPAA compliance", "Others may need access", "You might forget it"],
        answer: "To maintain security and HIPAA compliance"
      },
      {
        question: "Where do you access a patient’s chart?",
        options: ["Front desk", "Settings menu", "Patient dashboard via search or schedule", "Notes section only"],
        answer: "Patient dashboard via search or schedule"
      },
      {
        question: "What’s the benefit of templated phrases in notes?",
        options: ["Fills space", "Saves time and ensures consistency", "Avoids writing", "They are required"],
        answer: "Saves time and ensures consistency"
      },
      {
        question: "What should you do before stepping away from the computer?",
        options: ["Close the tab", "Leave it open for the next person", "Log out or lock the screen", "Switch to another chart"],
        answer: "Log out or lock the screen"
      },
      {
        question: "Which of the following contains protected health information (PHI)?",
        options: ["First name only", "Treatment plan notes", "Tooth number alone", "Appointment time"],
        answer: "Treatment plan notes"
      },
      {
        question: "When is it acceptable to enter placeholder notes instead of real details?",
        options: ["When you’re in a rush", "Never — notes must reflect real interactions", "If it’s a routine visit", "If another assistant will fix it later"],
        answer: "Never — notes must reflect real interactions"
      },
      {
        question: "What’s the correct protocol if you chart the wrong tooth?",
        options: ["Leave it", "Delete the record", "Edit the entry and document the correction", "Tell the patient"],
        answer: "Edit the entry and document the correction"
      },
      {
        question: "Why is it important to check notes before saving?",
        options: ["You might get a bonus", "For legal and billing accuracy", "To impress your supervisor", "It’s required by software"],
        answer: "For legal and billing accuracy"
      },
      {
        question: "What is the risk of logging in under someone else’s name?",
        options: ["None", "Loss of chart access", "Violates HIPAA and can lead to termination", "Improved speed"],
        answer: "Violates HIPAA and can lead to termination"
      },
      {
        question: "What is one way to ensure patient privacy in open-bay operatories?",
        options: ["Speak softly and avoid using names aloud", "Type faster", "Use full names to avoid confusion", "Whisper with masks off"],
        answer: "Speak softly and avoid using names aloud"
      }
    ]
  }
];

export default function AssistantTab() {
  const [quizResults, setQuizResults] = useState({});

  const handleQuizSubmit = (title, score) => {
    setQuizResults(prev => ({ ...prev, [title]: score }));
  };

  return (
    <div className="p-6 grid gap-6">
      {assistantModules.map((module, idx) => (
        <Card key={idx} className="p-4 rounded-2xl shadow">
          <h2 className="text-xl font-bold mb-2">{module.title}</h2>
          <p className="mb-4">{module.description}</p>
          <img src={module.image} alt={module.title} className="mb-4 w-full max-w-md rounded" />
          <ul className="list-disc ml-6 mb-4">
            {module.steps.map((step, i) => (
              <li key={i}>{step}</li>
            ))}
          </ul>
          <Quiz 
            module={module.title} 
            questions={module.quiz} 
            onSubmit={handleQuizSubmit} 
          />
          {quizResults[module.title] >= 90 && (
            <p className="text-green-600 font-semibold mt-2">✅ Passed with {quizResults[module.title]}%</p>
          )}
        </Card>
      ))}
    </div>
  );
}

function Quiz({ module, questions, onSubmit }) {
  const [answers, setAnswers] = useState({});
  const [submitted, setSubmitted] = useState(false);
  const [score, setScore] = useState(null);

  const handleChange = (qIndex, value) => {
    setAnswers(prev => ({ ...prev, [qIndex]: value }));
  };

  const handleSubmit = () => {
    let correct = 0;
    questions.forEach((q, i) => {
      if (answers[i] === q.answer) correct++;
    });
    const result = Math.round((correct / questions.length) * 100);
    setScore(result);
    setSubmitted(true);
    onSubmit(module, result);
  };

  return (
    <div className="mt-6">
      <h3 className="font-semibold text-lg mb-2">Quiz</h3>
      {questions.map((q, i) => (
        <div key={i} className="mb-4">
          <p className="mb-1 font-medium">{i + 1}. {q.question}</p>
          {q.options.map((opt, j) => (
            <label key={j} className="block">
              <input
                type="radio"
                name={`q-${module}-${i}`}
                value={opt}
                onChange={() => handleChange(i, opt)}
                disabled={submitted}
              /> {opt}
            </label>
          ))}
        </div>
      ))}
      {!submitted && (
        <Button onClick={handleSubmit}>Submit Quiz</Button>
      )}
      {submitted && (
        <p className="mt-2 font-semibold">Score: {score}%</p>
      )}
    </div>
  );
}
