import React, { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

const assistantModules = [
  {
    title: "Instrument Sterilization",
    description: "Step-by-step guide on cleaning, bagging, and autoclaving instruments.",
    steps: [
      "Pre-soak instruments in enzymatic solution.",
      "Scrub, rinse, and dry all instruments thoroughly.",
      "Bag with indicator strip and label with date.",
      "Place in autoclave and select appropriate cycle.",
      "Log sterilization cycle in tracking sheet (date/time/load ID)."
    ],
    image: "/images/sterilization.png",
    quiz: [
      {
        question: "What should you do first when handling dirty instruments?",
        options: ["Bag them", "Autoclave them", "Pre-soak in enzymatic solution", "Rinse with bleach"],
        answer: "Pre-soak in enzymatic solution"
      },
      // 9 more questions to be filled in for this section...
    ]
  },
  {
    title: "Emergency Response",
    description: "Protocol for handling medical and dental emergencies in the clinic.",
    steps: [
      "Know the location of emergency kits, AED, and oxygen.",
      "Call for help immediately and alert the doctor.",
      "Position patient appropriately based on emergency type.",
      "Assist in administering oxygen, glucose, or epinephrine as directed.",
      "Document the incident after stabilization and report it to the supervisor."
    ],
    image: "/images/emergency_response.png",
    quiz: [
      {
        question: "Where should you look for emergency supplies like an AED or oxygen?",
        options: ["Sterilization area", "Front desk", "Designated emergency supply area", "Doctor's office"],
        answer: "Designated emergency supply area"
      },
      {
        question: "If a patient faints, what is the first step you should take?",
        options: ["Administer glucose", "Call 911 immediately", "Lower the chair back and elevate legs", "Splash water on face"],
        answer: "Lower the chair back and elevate legs"
      },
      {
        question: "Which of the following is used for anaphylaxis?",
        options: ["Oxygen", "Epinephrine", "Aspirin", "Glucose"],
        answer: "Epinephrine"
      },
      {
        question: "Who should be notified immediately during any medical emergency?",
        options: ["Dental assistant", "Front desk", "Supervisor or Doctor", "Patient's family"],
        answer: "Supervisor or Doctor"
      },
      {
        question: "When should documentation of the incident take place?",
        options: ["Before the emergency is resolved", "While waiting for help", "After the situation is stabilized", "Only if the patient asks"],
        answer: "After the situation is stabilized"
      },
      {
        question: "What is the most important first action in any emergency?",
        options: ["Administer treatment", "Start CPR", "Call for help and alert others", "Check insurance"],
        answer: "Call for help and alert others"
      },
      {
        question: "What should you do if a patient has a nosebleed during treatment?",
        options: ["Lean them back and pinch nose", "Have them lean forward and pinch nose", "Give them gauze to chew", "Call 911"],
        answer: "Have them lean forward and pinch nose"
      },
      {
        question: "What should you always do before administering any emergency medication?",
        options: ["Check expiration date", "Ask another assistant", "Mix it", "Ask the front desk"],
        answer: "Check expiration date"
      },
      {
        question: "In the case of a seizure, what should you avoid doing?",
        options: ["Protect the head", "Call for help", "Put something in their mouth", "Remove nearby hazards"],
        answer: "Put something in their mouth"
      },
      {
        question: "How often should the emergency kit be checked for expired items?",
        options: ["Monthly", "Annually", "Weekly", "Never"],
        answer: "Monthly"
      }
    ]
  }
];

export default function AssistantTab() {
  const [quizResults, setQuizResults] = useState({});

  const handleQuizSubmit = (title, score) => {
    setQuizResults(prev => ({ ...prev, [title]: score }));
  };

  return (
    <div className="p-6 grid gap-6">
      {assistantModules.map((module, idx) => (
        <Card key={idx} className="p-4 rounded-2xl shadow">
          <h2 className="text-xl font-bold mb-2">{module.title}</h2>
          <p className="mb-4">{module.description}</p>
          <img src={module.image} alt={module.title} className="mb-4 w-full max-w-md rounded" />
          <ul className="list-disc ml-6 mb-4">
            {module.steps.map((step, i) => (
              <li key={i}>{step}</li>
            ))}
          </ul>
          <Quiz 
            module={module.title} 
            questions={module.quiz} 
            onSubmit={handleQuizSubmit} 
          />
          {quizResults[module.title] >= 90 && (
            <p className="text-green-600 font-semibold mt-2">âœ… Passed with {quizResults[module.title]}%</p>
          )}
        </Card>
      ))}
    </div>
  );
}

function Quiz({ module, questions, onSubmit }) {
  const [answers, setAnswers] = useState({});
  const [submitted, setSubmitted] = useState(false);
  const [score, setScore] = useState(null);

  const handleChange = (qIndex, value) => {
    setAnswers(prev => ({ ...prev, [qIndex]: value }));
  };

  const handleSubmit = () => {
    let correct = 0;
    questions.forEach((q, i) => {
      if (answers[i] === q.answer) correct++;
    });
    const result = Math.round((correct / questions.length) * 100);
    setScore(result);
    setSubmitted(true);
    onSubmit(module, result);
  };

  return (
    <div className="mt-6">
      <h3 className="font-semibold text-lg mb-2">Quiz</h3>
      {questions.map((q, i) => (
        <div key={i} className="mb-4">
          <p className="mb-1 font-medium">{i + 1}. {q.question}</p>
          {q.options.map((opt, j) => (
            <label key={j} className="block">
              <input
                type="radio"
                name={`q-${module}-${i}`}
                value={opt}
                onChange={() => handleChange(i, opt)}
                disabled={submitted}
              /> {opt}
            </label>
          ))}
        </div>
      ))}
      {!submitted && (
        <Button onClick={handleSubmit}>Submit Quiz</Button>
      )}
      {submitted && (
        <p className="mt-2 font-semibold">Score: {score}%</p>
      )}
    </div>
  );
}
