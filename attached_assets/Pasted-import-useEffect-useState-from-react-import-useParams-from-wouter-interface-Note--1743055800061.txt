import { useEffect, useState } from "react";
import { useParams } from "wouter";

interface Note {
  id: string;
  content: string;
  status: "draft" | "finalized";
  createdAt: string;
  updatedAt: string;
  provider: string;
}

export default function PatientNotesPage() {
  const { patientId } = useParams();
  const [notes, setNotes] = useState<Note[]>([]);
  const [newNote, setNewNote] = useState("");

  useEffect(() => {
    const fetchNotes = async () => {
      try {
        const res = await fetch(`/api/patients/${patientId}/notes`);
        const data = await res.json();
        setNotes(data);
      } catch (err) {
        console.error("Failed to fetch notes", err);
      }
    };

    fetchNotes();
  }, [patientId]);

  const handleSave = async () => {
    if (!newNote.trim()) return;
    try {
      const res = await fetch(`/api/patients/${patientId}/notes`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ content: newNote })
      });
      const savedNote = await res.json();
      setNotes([savedNote, ...notes]);
      setNewNote("");
    } catch (err) {
      console.error("Failed to save note", err);
    }
  };

  const handleFinalize = async (id: string) => {
    try {
      await fetch(`/api/notes/${id}/finalize`, { method: "POST" });
      setNotes(notes.map(note => note.id === id ? { ...note, status: "finalized" } : note));
    } catch (err) {
      console.error("Failed to finalize note", err);
    }
  };

  const handleEdit = (id: string, updatedContent: string) => {
    setNotes(notes.map(note => note.id === id ? { ...note, content: updatedContent } : note));
  };

  const handleUpdate = async (id: string, updatedContent: string) => {
    try {
      await fetch(`/api/notes/${id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ content: updatedContent })
      });
    } catch (err) {
      console.error("Failed to update note", err);
    }
  };

  return (
    <div className="p-4 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-4">Patient Notes</h1>

      <textarea
        value={newNote}
        onChange={(e) => setNewNote(e.target.value)}
        className="w-full border p-2 rounded mb-2"
        placeholder="Write a new note..."
      />
      <button onClick={handleSave} className="bg-blue-600 text-white px-4 py-2 rounded">
        Save Note
      </button>

      <div className="mt-6">
        {notes.map((note) => (
          <div key={note.id} className="border rounded p-3 mb-3 bg-white">
            <div className="text-sm text-gray-600 mb-1">
              {note.provider} | {new Date(note.createdAt).toLocaleString()} | {note.status.toUpperCase()}
            </div>
            <textarea
              value={note.content}
              onChange={(e) => handleEdit(note.id, e.target.value)}
              onBlur={(e) => handleUpdate(note.id, e.target.value)}
              className="w-full border rounded p-2 text-sm"
              disabled={note.status === "finalized"}
            />
            {note.status === "draft" && (
              <button
                onClick={() => handleFinalize(note.id)}
                className="mt-2 px-3 py-1 bg-green-600 text-white rounded text-sm"
              >
                Finalize
              </button>
            )}
          </div>
        ))}
      </div>
    </div>
  );
}
