import React, { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

const assistantModules = [
  {
    title: "Instrument Sterilization",
    description: "Step-by-step guide on cleaning, bagging, and autoclaving instruments.",
    steps: [
      "Pre-soak instruments in enzymatic solution.",
      "Scrub, rinse, and dry all instruments thoroughly.",
      "Bag with indicator strip and label with date.",
      "Place in autoclave and select appropriate cycle.",
      "Log sterilization cycle in tracking sheet (date/time/load ID)."
    ],
    image: "/images/sterilization.png",
    quiz: [
      {
        question: "What should you do first when handling dirty instruments?",
        options: ["Bag them", "Autoclave them", "Pre-soak in enzymatic solution", "Rinse with bleach"],
        answer: "Pre-soak in enzymatic solution"
      }
      // Add 9 more questions here
    ]
  },
  {
    title: "Emergency Response",
    description: "Protocol for handling medical and dental emergencies in the clinic.",
    steps: [
      "Know the location of emergency kits, AED, and oxygen.",
      "Call for help immediately and alert the doctor.",
      "Position patient appropriately based on emergency type.",
      "Assist in administering oxygen, glucose, or epinephrine as directed.",
      "Document the incident after stabilization and report it to the supervisor."
    ],
    image: "/images/emergency_response.png",
    quiz: [
      {
        question: "Where should you look for emergency supplies like an AED or oxygen?",
        options: ["Sterilization area", "Front desk", "Designated emergency supply area", "Doctor's office"],
        answer: "Designated emergency supply area"
      },
      {
        question: "If a patient faints, what is the first step you should take?",
        options: ["Administer glucose", "Call 911 immediately", "Lower the chair back and elevate legs", "Splash water on face"],
        answer: "Lower the chair back and elevate legs"
      },
      {
        question: "Which of the following is used for anaphylaxis?",
        options: ["Oxygen", "Epinephrine", "Aspirin", "Glucose"],
        answer: "Epinephrine"
      },
      {
        question: "Who should be notified immediately during any medical emergency?",
        options: ["Dental assistant", "Front desk", "Supervisor or Doctor", "Patient's family"],
        answer: "Supervisor or Doctor"
      },
      {
        question: "When should documentation of the incident take place?",
        options: ["Before the emergency is resolved", "While waiting for help", "After the situation is stabilized", "Only if the patient asks"],
        answer: "After the situation is stabilized"
      },
      {
        question: "What is the most important first action in any emergency?",
        options: ["Administer treatment", "Start CPR", "Call for help and alert others", "Check insurance"],
        answer: "Call for help and alert others"
      },
      {
        question: "What should you do if a patient has a nosebleed during treatment?",
        options: ["Lean them back and pinch nose", "Have them lean forward and pinch nose", "Give them gauze to chew", "Call 911"],
        answer: "Have them lean forward and pinch nose"
      },
      {
        question: "What should you always do before administering any emergency medication?",
        options: ["Check expiration date", "Ask another assistant", "Mix it", "Ask the front desk"],
        answer: "Check expiration date"
      },
      {
        question: "In the case of a seizure, what should you avoid doing?",
        options: ["Protect the head", "Call for help", "Put something in their mouth", "Remove nearby hazards"],
        answer: "Put something in their mouth"
      },
      {
        question: "How often should the emergency kit be checked for expired items?",
        options: ["Monthly", "Annually", "Weekly", "Never"],
        answer: "Monthly"
      }
    ]
  },
  {
    title: "Radiograph Technique",
    description: "ADA-compliant procedures for capturing diagnostic-quality intraoral radiographs while maintaining HIPAA-safe patient handling.",
    steps: [
      "Verify patient identity and explain the procedure (without disclosing sensitive PHI in public areas).",
      "Select appropriate sensor size based on age and arch.",
      "Position the patient with occlusal plane parallel to the floor.",
      "Use Rinn or XCP holders for precise alignment and safety.",
      "Follow ADA guidelines for angulation and head positioning.",
      "Minimize retakes — check placement before exposure.",
      "Always document in the patient's chart when a radiograph is taken, and why."
    ],
    image: "/images/radiographs.png",
    quiz: [
      {
        question: "Why should you verify patient identity before taking radiographs?",
        options: ["To avoid billing errors", "To match insurance details", "To ensure HIPAA compliance and correct charting", "To choose the right film"],
        answer: "To ensure HIPAA compliance and correct charting"
      },
      {
        question: "What does the ADA recommend for occlusal plane positioning?",
        options: ["45-degree tilt", "Parallel to the floor", "Vertical alignment", "Lying back in full recline"],
        answer: "Parallel to the floor"
      },
      {
        question: "What tool ensures accurate angulation and placement?",
        options: ["Cotton roll", "Bite block", "Rinn/XCP holder", "Digital sensor"],
        answer: "Rinn/XCP holder"
      },
      {
        question: "Why is it important to minimize retakes?",
        options: ["To save time", "To reduce radiation exposure and follow ALARA principles", "To avoid embarrassment", "To reduce film waste"],
        answer: "To reduce radiation exposure and follow ALARA principles"
      },
      {
        question: "What should you do immediately after taking a radiograph?",
        options: ["Delete it", "Show the patient", "Document in the patient’s chart", "Call the insurance"],
        answer: "Document in the patient’s chart"
      },
      {
        question: "Which sensor size is usually used for pediatric patients?",
        options: ["Size 1", "Size 2", "Size 3", "Size 0"],
        answer: "Size 0"
      },
      {
        question: "How should you handle patient PHI when discussing X-rays?",
        options: ["Only in private areas or operatories", "At front desk", "With family present", "In waiting room if quiet"],
        answer: "Only in private areas or operatories"
      },
      {
        question: "What happens if a patient refuses X-rays?",
        options: ["Ignore it", "Document refusal and inform doctor", "Force them to comply", "Cancel appointment"],
        answer: "Document refusal and inform doctor"
      },
      {
        question: "What is the first step before taking radiographs?",
        options: ["Put on gloves", "Explain the procedure", "Check the machine", "Turn off lights"],
        answer: "Explain the procedure"
      },
      {
        question: "What is ALARA?",
        options: ["A radiograph type", "A law", "An exposure technique", "A radiation safety principle: As Low As Reasonably Achievable"],
        answer: "A radiation safety principle: As Low As Reasonably Achievable"
      }
    ]
  }
];

export default function AssistantTab() {
  const [quizResults, setQuizResults] = useState({});

  const handleQuizSubmit = (title, score) => {
    setQuizResults(prev => ({ ...prev, [title]: score }));
  };

  return (
    <div className="p-6 grid gap-6">
      {assistantModules.map((module, idx) => (
        <Card key={idx} className="p-4 rounded-2xl shadow">
          <h2 className="text-xl font-bold mb-2">{module.title}</h2>
          <p className="mb-4">{module.description}</p>
          <img src={module.image} alt={module.title} className="mb-4 w-full max-w-md rounded" />
          <ul className="list-disc ml-6 mb-4">
            {module.steps.map((step, i) => (
              <li key={i}>{step}</li>
            ))}
          </ul>
          <Quiz 
            module={module.title} 
            questions={module.quiz} 
            onSubmit={handleQuizSubmit} 
          />
          {quizResults[module.title] >= 90 && (
            <p className="text-green-600 font-semibold mt-2">✅ Passed with {quizResults[module.title]}%</p>
          )}
        </Card>
      ))}
    </div>
  );
}

function Quiz({ module, questions, onSubmit }) {
  const [answers, setAnswers] = useState({});
  const [submitted, setSubmitted] = useState(false);
  const [score, setScore] = useState(null);

  const handleChange = (qIndex, value) => {
    setAnswers(prev => ({ ...prev, [qIndex]: value }));
  };

  const handleSubmit = () => {
    let correct = 0;
    questions.forEach((q, i) => {
      if (answers[i] === q.answer) correct++;
    });
    const result = Math.round((correct / questions.length) * 100);
    setScore(result);
    setSubmitted(true);
    onSubmit(module, result);
  };

  return (
    <div className="mt-6">
      <h3 className="font-semibold text-lg mb-2">Quiz</h3>
      {questions.map((q, i) => (
        <div key={i} className="mb-4">
          <p className="mb-1 font-medium">{i + 1}. {q.question}</p>
          {q.options.map((opt, j) => (
            <label key={j} className="block">
              <input
                type="radio"
                name={`q-${module}-${i}`}
                value={opt}
                onChange={() => handleChange(i, opt)}
                disabled={submitted}
              /> {opt}
            </label>
          ))}
        </div>
      ))}
      {!submitted && (
        <Button onClick={handleSubmit}>Submit Quiz</Button>
      )}
      {submitted && (
        <p className="mt-2 font-semibold">Score: {score}%</p>
      )}
    </div>
  );
}
