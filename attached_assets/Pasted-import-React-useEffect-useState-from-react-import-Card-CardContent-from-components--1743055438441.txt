import React, { useEffect, useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { format } from "date-fns";

interface Note {
  id: string;
  content: string;
  createdAt: string;
  provider: string;
  approved: boolean;
}

interface PatientNotesDisplayProps {
  patientId: string;
  onEdit?: (updatedNote: Note) => void;
  onApprove?: (noteId: string) => void;
}

export const PatientNotesDisplay: React.FC<PatientNotesDisplayProps> = ({
  patientId,
  onEdit,
  onApprove,
}) => {
  const [notes, setNotes] = useState<Note[]>([]);
  const [editIndex, setEditIndex] = useState<number | null>(null);
  const [editedContent, setEditedContent] = useState<string>("");

  useEffect(() => {
    fetch(`/api/patient-notes/${patientId}`)
      .then((res) => res.json())
      .then((data) => setNotes(data))
      .catch((err) => console.error("Failed to fetch notes", err));
  }, [patientId]);

  const handleEdit = (index: number, note: Note) => {
    setEditIndex(index);
    setEditedContent(note.content);
  };

  const handleSave = async (note: Note) => {
    const updatedNote = { ...note, content: editedContent };
    const res = await fetch(`/api/patient-notes/${note.id}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ content: editedContent }),
    });

    if (res.ok) {
      setNotes((prev) => prev.map((n) => (n.id === note.id ? updatedNote : n)));
      setEditIndex(null);
      if (onEdit) onEdit(updatedNote);
    }
  };

  const handleApprove = async (noteId: string) => {
    const res = await fetch(`/api/patient-notes/approve/${noteId}`, {
      method: "POST",
    });
    if (res.ok) {
      setNotes((prev) =>
        prev.map((n) => (n.id === noteId ? { ...n, approved: true } : n))
      );
      if (onApprove) onApprove(noteId);
    }
  };

  return (
    <div className="space-y-4">
      {notes.map((note, index) => (
        <Card key={note.id} className="border">
          <CardContent className="space-y-2 p-4">
            <div className="text-sm text-muted-foreground">
              <strong>Provider:</strong> {note.provider} <br />
              <strong>Date:</strong> {format(new Date(note.createdAt), "PPP p")}
            </div>
            {editIndex === index ? (
              <>
                <Label>Edit Note</Label>
                <Textarea
                  value={editedContent}
                  onChange={(e) => setEditedContent(e.target.value)}
                />
                <div className="flex gap-2 mt-2">
                  <Button onClick={() => handleSave(note)}>Save</Button>
                  <Button
                    variant="outline"
                    onClick={() => setEditIndex(null)}
                  >
                    Cancel
                  </Button>
                </div>
              </>
            ) : (
              <>
                <p>{note.content}</p>
                <div className="flex gap-2 mt-2">
                  {!note.approved && (
                    <Button
                      size="sm"
                      onClick={() => handleEdit(index, note)}
                    >
                      Edit
                    </Button>
                  )}
                  {!note.approved && (
                    <Button
                      size="sm"
                      onClick={() => handleApprove(note.id)}
                    >
                      Approve
                    </Button>
                  )}
                </div>
              </>
            )}
          </CardContent>
        </Card>
      ))}
    </div>
  );
};