import React, { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

const assistantModules = [
  // Existing modules...
  {
    title: "Chair Positioning & Ergonomics",
    description: "Guidelines for correct patient and assistant positioning during dental procedures to minimize strain and enhance visibility.",
    steps: [
      "Ensure the patient’s occlusal plane is parallel to the floor for most procedures.",
      "Adjust chair height so the doctor’s elbows are at a 90-degree angle.",
      "Use the assistant stool with back support and armrest correctly.",
      "Position the operatory light at 45 degrees to reduce glare and shadows.",
      "Avoid twisting or overreaching — reposition yourself or the patient as needed."
    ],
    image: "/images/chair_positioning.png",
    quiz: [
      {
        question: "What should the patient’s occlusal plane be aligned with?",
        options: ["45 degrees to the floor", "Parallel to the floor", "Tilted forward", "Slightly reclined"],
        answer: "Parallel to the floor"
      },
      {
        question: "At what angle should the dentist’s elbows be during treatment?",
        options: ["60 degrees", "90 degrees", "120 degrees", "45 degrees"],
        answer: "90 degrees"
      },
      {
        question: "What is the proper use of the assistant stool?",
        options: ["Use without back support", "Sit upright with back and arm support engaged", "Lean forward for better view", "Stand beside the stool"],
        answer: "Sit upright with back and arm support engaged"
      },
      {
        question: "How should the operatory light be positioned?",
        options: ["Directly above the patient’s face", "At a 90-degree angle", "At 45 degrees to minimize shadows", "On the assistant’s side"],
        answer: "At 45 degrees to minimize shadows"
      },
      {
        question: "What should you avoid to prevent musculoskeletal strain?",
        options: ["Reaching over the patient", "Adjusting chair height", "Using back support", "Repositioning patient"],
        answer: "Reaching over the patient"
      },
      {
        question: "When is it acceptable to twist your body to reach instruments?",
        options: ["Only during emergencies", "Never — reposition instead", "If you stretch first", "When the doctor asks you to"],
        answer: "Never — reposition instead"
      },
      {
        question: "How high should the assistant be seated compared to the doctor?",
        options: ["At the same height", "4-6 inches above the doctor", "Below the doctor", "Standing height"],
        answer: "4-6 inches above the doctor"
      },
      {
        question: "What should you do if visibility is poor due to patient positioning?",
        options: ["Move your head around", "Ask the patient to adjust", "Reposition the light and chair", "Lean further in"],
        answer: "Reposition the light and chair"
      },
      {
        question: "Why is proper ergonomics important for assistants?",
        options: ["It helps you work faster", "Prevents injury and fatigue", "Makes you look professional", "Avoids getting fired"],
        answer: "Prevents injury and fatigue"
      },
      {
        question: "What role does chair positioning play in dental treatment?",
        options: ["None", "Only for comfort", "It impacts visibility, access, and patient comfort", "Only matters in hygiene visits"],
        answer: "It impacts visibility, access, and patient comfort"
      }
    ]
  }
];

export default function AssistantTab() {
  const [quizResults, setQuizResults] = useState({});

  const handleQuizSubmit = (title, score) => {
    setQuizResults(prev => ({ ...prev, [title]: score }));
  };

  return (
    <div className="p-6 grid gap-6">
      {assistantModules.map((module, idx) => (
        <Card key={idx} className="p-4 rounded-2xl shadow">
          <h2 className="text-xl font-bold mb-2">{module.title}</h2>
          <p className="mb-4">{module.description}</p>
          <img src={module.image} alt={module.title} className="mb-4 w-full max-w-md rounded" />
          <ul className="list-disc ml-6 mb-4">
            {module.steps.map((step, i) => (
              <li key={i}>{step}</li>
            ))}
          </ul>
          <Quiz 
            module={module.title} 
            questions={module.quiz} 
            onSubmit={handleQuizSubmit} 
          />
          {quizResults[module.title] >= 90 && (
            <p className="text-green-600 font-semibold mt-2">✅ Passed with {quizResults[module.title]}%</p>
          )}
        </Card>
      ))}
    </div>
  );
}

function Quiz({ module, questions, onSubmit }) {
  const [answers, setAnswers] = useState({});
  const [submitted, setSubmitted] = useState(false);
  const [score, setScore] = useState(null);

  const handleChange = (qIndex, value) => {
    setAnswers(prev => ({ ...prev, [qIndex]: value }));
  };

  const handleSubmit = () => {
    let correct = 0;
    questions.forEach((q, i) => {
      if (answers[i] === q.answer) correct++;
    });
    const result = Math.round((correct / questions.length) * 100);
    setScore(result);
    setSubmitted(true);
    onSubmit(module, result);
  };

  return (
    <div className="mt-6">
      <h3 className="font-semibold text-lg mb-2">Quiz</h3>
      {questions.map((q, i) => (
        <div key={i} className="mb-4">
          <p className="mb-1 font-medium">{i + 1}. {q.question}</p>
          {q.options.map((opt, j) => (
            <label key={j} className="block">
              <input
                type="radio"
                name={`q-${module}-${i}`}
                value={opt}
                onChange={() => handleChange(i, opt)}
                disabled={submitted}
              /> {opt}
            </label>
          ))}
        </div>
      ))}
      {!submitted && (
        <Button onClick={handleSubmit}>Submit Quiz</Button>
      )}
      {submitted && (
        <p className="mt-2 font-semibold">Score: {score}%</p>
      )}
    </div>
  );
}
