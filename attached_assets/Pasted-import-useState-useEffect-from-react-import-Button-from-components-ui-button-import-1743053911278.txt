import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent } from "@/components/ui/card";
import { useUser } from "@/hooks/use-user";
import { useParams } from "wouter";

interface Note {
  id: string;
  content: string;
  date: string;
  provider: string;
  procedure: string;
  status: "draft" | "approved";
  source: "ai" | "voice" | "provider";
}

export default function PatientNotesViewer() {
  const { user } = useUser();
  const [notes, setNotes] = useState<Note[]>([]);
  const [editingNote, setEditingNote] = useState<Note | null>(null);
  const [updatedContent, setUpdatedContent] = useState("");
  const { id: patientId } = useParams();

  useEffect(() => {
    fetch(`/api/patients/${patientId}/notes`)
      .then(res => res.json())
      .then(setNotes)
      .catch(err => console.error("Error fetching notes:", err));
  }, [patientId]);

  const approveNote = async (id: string) => {
    await fetch(`/api/patients/${patientId}/notes/${id}/approve`, { method: "POST" });
    const updated = notes.map(n => (n.id === id ? { ...n, status: "approved" } : n));
    setNotes(updated);
  };

  const saveEdit = async () => {
    if (!editingNote) return;
    const res = await fetch(`/api/patients/${patientId}/notes/${editingNote.id}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ content: updatedContent }),
    });
    if (res.ok) {
      const updated = notes.map(n =>
        n.id === editingNote.id ? { ...n, content: updatedContent } : n
      );
      setNotes(updated);
      setEditingNote(null);
    }
  };

  return (
    <div className="p-4 space-y-4">
      {notes.map(note => (
        <Card key={note.id} className="border rounded-xl shadow">
          <CardContent>
            <div className="text-sm text-gray-600">
              <strong>{note.date}</strong> by {note.provider} via {note.source}
            </div>
            <div className="mt-2 text-base">
              {editingNote?.id === note.id ? (
                <Textarea
                  value={updatedContent}
                  onChange={e => setUpdatedContent(e.target.value)}
                />
              ) : (
                <p>{note.content}</p>
              )}
            </div>
            <div className="mt-4 flex gap-2">
              {note.status === "draft" && user?.role === "provider" && (
                <>
                  {editingNote?.id === note.id ? (
                    <Button onClick={saveEdit}>Save</Button>
                  ) : (
                    <Button
                      variant="secondary"
                      onClick={() => {
                        setEditingNote(note);
                        setUpdatedContent(note.content);
                      }}
                    >
                      Edit
                    </Button>
                  )}
                  <Button onClick={() => approveNote(note.id)}>Approve</Button>
                </>
              )}
              {note.status === "approved" && <span className="text-green-600">Approved</span>}
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}