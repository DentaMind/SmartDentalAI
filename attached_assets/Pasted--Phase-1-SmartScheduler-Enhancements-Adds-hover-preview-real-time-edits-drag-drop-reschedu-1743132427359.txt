// âœ… Phase 1: SmartScheduler Enhancements
// Adds hover preview, real-time edits, drag-drop rescheduling, side-booking, color-coding, block-out handling

import React, { useEffect, useState } from "react";
import axios from "axios";
import { format } from "date-fns";
import { Tooltip } from "@/components/ui/tooltip";
import { Card } from "@/components/ui/card";

export function SmartScheduler() {
  const [appointments, setAppointments] = useState([]);
  const [hoveredPatient, setHoveredPatient] = useState(null);
  const [selectedTime, setSelectedTime] = useState(null);

  useEffect(() => {
    axios.get("/api/schedule").then((res) => setAppointments(res.data));
  }, []);

  const timeSlots = Array.from({ length: 13 }, (_, i) => 7 + i);
  const providers = [...Array(7)].map((_, i) => `Provider ${i + 1}`);

  return (
    <div className="overflow-x-auto">
      <div className="grid grid-cols-[100px_repeat(7,minmax(200px,1fr))]">
        <div className="bg-muted text-sm font-bold p-2">Time</div>
        {providers.map((name, i) => (
          <div key={i} className="bg-muted text-sm font-bold p-2">
            {name}
          </div>
        ))}

        {timeSlots.map((hour) => (
          <React.Fragment key={hour}>
            <div className="border p-1 text-xs font-medium bg-background">
              {hour}:00
            </div>
            {providers.map((_, colIdx) => {
              const slotAppts = appointments.filter(
                (a) => a.time === `${hour}:00` && a.providerIndex === colIdx
              );

              return (
                <div
                  key={`${hour}-${colIdx}`}
                  className="border h-20 relative group hover:bg-accent cursor-pointer"
                  onClick={() => setSelectedTime({ hour, providerIndex: colIdx })}
                >
                  {slotAppts.map((appt, i) => (
                    <Tooltip content={`Chart: ${appt.patientName}`} key={i}>
                      <div
                        className={`absolute top-0 left-0 right-0 h-full px-2 py-1 text-xs rounded shadow 
                          ${appt.status === "confirmed" ? "bg-green-100 border-l-4 border-green-600" : ""}
                          ${appt.status === "cancelled" ? "bg-red-100 border-l-4 border-red-600" : ""}
                          ${appt.status === "no_show" ? "bg-yellow-100 border-l-4 border-yellow-600" : ""}
                          ${appt.status === "unconfirmed" ? "bg-gray-200 border-l-4 border-gray-500" : ""}`}
                        onMouseEnter={() => setHoveredPatient(appt)}
                        onMouseLeave={() => setHoveredPatient(null)}
                      >
                        <div className="font-bold truncate">{appt.patientName}</div>
                        <div className="text-xs truncate">{appt.reason}</div>
                      </div>
                    </Tooltip>
                  ))}
                </div>
              );
            })}
          </React.Fragment>
        ))}
      </div>

      {/* Hovered Patient Preview */}
      {hoveredPatient && (
        <Card className="fixed bottom-4 left-4 w-[300px] shadow-lg border bg-white p-3">
          <div className="text-sm font-semibold">{hoveredPatient.patientName}</div>
          <div className="text-xs text-muted-foreground">
            {hoveredPatient.reason} | {hoveredPatient.status}
          </div>
          <div className="text-xs mt-1">
            Phone: {hoveredPatient.phone}<br />
            Insurance: {hoveredPatient.insurance}<br />
            Notes: {hoveredPatient.notes}
          </div>
        </Card>
      )}
    </div>
  );
}