import React, { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

const assistantModules = [
  // Existing modules...
  {
    title: "Patient Communication & Case Acceptance",
    description: "How to communicate treatment plans professionally and clearly, build trust with patients, and improve treatment acceptance rates.",
    steps: [
      "Greet patients warmly and use their preferred name.",
      "Maintain eye contact and use open body language.",
      "Explain treatments in simple, non-technical language.",
      "Use visual aids (models, diagrams) to enhance understanding.",
      "Avoid discussing costs unless you are trained and authorized to do so.",
      "Empathize with concerns and reassure them with doctor-reviewed information.",
      "Document all patient questions and the answers given."
    ],
    image: "/images/patient_communication.png",
    quiz: [
      {
        question: "What’s the first step to making a patient feel at ease?",
        options: ["Show them X-rays", "Use technical language", "Greet them by name with a warm tone", "Discuss costs"],
        answer: "Greet them by name with a warm tone"
      },
      {
        question: "Which of the following improves understanding of treatment?",
        options: ["Speaking quickly", "Visual aids like models or diagrams", "Discussing insurance first", "Using long technical terms"],
        answer: "Visual aids like models or diagrams"
      },
      {
        question: "When is it appropriate to talk about costs?",
        options: ["Only when trained and authorized", "As soon as they walk in", "When the assistant chooses", "During X-rays"],
        answer: "Only when trained and authorized"
      },
      {
        question: "Why should you avoid using dental jargon?",
        options: ["It saves time", "It impresses patients", "It can confuse or intimidate them", "It’s required"],
        answer: "It can confuse or intimidate them"
      },
      {
        question: "What body language builds trust with patients?",
        options: ["Arms crossed", "Looking away while talking", "Open posture and eye contact", "Standing behind the chair"],
        answer: "Open posture and eye contact"
      },
      {
        question: "What should you do if a patient has a concern about treatment?",
        options: ["Tell them not to worry", "Ignore it and proceed", "Empathize and explain or bring in the doctor", "Say it's not your job"],
        answer: "Empathize and explain or bring in the doctor"
      },
      {
        question: "Why is documenting patient questions important?",
        options: ["To review later", "To help with billing", "For HIPAA compliance and legal protection", "For training new assistants"],
        answer: "For HIPAA compliance and legal protection"
      },
      {
        question: "What is the best way to improve treatment plan acceptance?",
        options: ["Discuss money only", "Use medical terms", "Build rapport and educate clearly", "Be quiet during doctor consults"],
        answer: "Build rapport and educate clearly"
      },
      {
        question: "What should you do if you don’t know the answer to a patient’s question?",
        options: ["Make an educated guess", "Refer to the doctor or treatment coordinator", "Tell them to Google it", "Change the subject"],
        answer: "Refer to the doctor or treatment coordinator"
      },
      {
        question: "When should treatment options be discussed with patients?",
        options: ["After payment is collected", "During procedures", "Before consent and only with doctor approval", "Never — that’s the doctor’s job"],
        answer: "Before consent and only with doctor approval"
      }
    ]
  }
];

export default function AssistantTab() {
  const [quizResults, setQuizResults] = useState({});

  const handleQuizSubmit = (title, score) => {
    setQuizResults(prev => ({ ...prev, [title]: score }));
  };

  return (
    <div className="p-6 grid gap-6">
      {assistantModules.map((module, idx) => (
        <Card key={idx} className="p-4 rounded-2xl shadow">
          <h2 className="text-xl font-bold mb-2">{module.title}</h2>
          <p className="mb-4">{module.description}</p>
          <img src={module.image} alt={module.title} className="mb-4 w-full max-w-md rounded" />
          <ul className="list-disc ml-6 mb-4">
            {module.steps.map((step, i) => (
              <li key={i}>{step}</li>
            ))}
          </ul>
          <Quiz 
            module={module.title} 
            questions={module.quiz} 
            onSubmit={handleQuizSubmit} 
          />
          {quizResults[module.title] >= 90 && (
            <p className="text-green-600 font-semibold mt-2">✅ Passed with {quizResults[module.title]}%</p>
          )}
        </Card>
      ))}
    </div>
  );
}

function Quiz({ module, questions, onSubmit }) {
  const [answers, setAnswers] = useState({});
  const [submitted, setSubmitted] = useState(false);
  const [score, setScore] = useState(null);

  const handleChange = (qIndex, value) => {
    setAnswers(prev => ({ ...prev, [qIndex]: value }));
  };

  const handleSubmit = () => {
    let correct = 0;
    questions.forEach((q, i) => {
      if (answers[i] === q.answer) correct++;
    });
    const result = Math.round((correct / questions.length) * 100);
    setScore(result);
    setSubmitted(true);
    onSubmit(module, result);
  };

  return (
    <div className="mt-6">
      <h3 className="font-semibold text-lg mb-2">Quiz</h3>
      {questions.map((q, i) => (
        <div key={i} className="mb-4">
          <p className="mb-1 font-medium">{i + 1}. {q.question}</p>
          {q.options.map((opt, j) => (
            <label key={j} className="block">
              <input
                type="radio"
                name={`q-${module}-${i}`}
                value={opt}
                onChange={() => handleChange(i, opt)}
                disabled={submitted}
              /> {opt}
            </label>
          ))}
        </div>
      ))}
      {!submitted && (
        <Button onClick={handleSubmit}>Submit Quiz</Button>
      )}
      {submitted && (
        <p className="mt-2 font-semibold">Score: {score}%</p>
      )}
    </div>
  );
}
