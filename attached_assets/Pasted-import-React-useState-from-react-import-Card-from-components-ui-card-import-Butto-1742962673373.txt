import React, { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

const assistantModules = [
  // Existing modules...
  {
    title: "Suction Technique & Chairside Etiquette",
    description: "Proper suction use and positioning while assisting the doctor to ensure patient comfort and optimal workflow.",
    steps: [
      "Hold the HVE (high-volume evacuator) with your thumb-to-nose grip for control.",
      "Position suction before the handpiece enters the mouth to prevent aerosol escape.",
      "Use mirror retraction and high-volume suction to keep the working area dry and visible.",
      "Avoid contacting soft tissue directly — hover close to the site or use retractors if needed.",
      "Minimize unnecessary movements and anticipate the doctor’s instrument hand-offs.",
      "Pass instruments in a safe and ergonomic manner, handle toward the doctor.",
      "Maintain eye contact and communicate non-verbally during procedures when possible."
    ],
    image: "/images/suction_technique.png",
    quiz: [
      {
        question: "What grip should be used for controlling the HVE suction?",
        options: ["Pen grip", "Thumb-to-nose grip", "Fingertip hold", "Handle up"],
        answer: "Thumb-to-nose grip"
      },
      {
        question: "When should the suction be positioned?",
        options: ["After the handpiece enters", "Mid-procedure", "Before handpiece enters to capture aerosols", "At the end"],
        answer: "Before handpiece enters to capture aerosols"
      },
      {
        question: "What is the risk of direct contact between the suction tip and soft tissue?",
        options: ["None", "Better suction", "Tissue trauma and patient discomfort", "Patient likes it"],
        answer: "Tissue trauma and patient discomfort"
      },
      {
        question: "How should you pass instruments to the doctor?",
        options: ["Sharp end toward them", "One by one randomly", "Handle toward the doctor", "On the tray only"],
        answer: "Handle toward the doctor"
      },
      {
        question: "What is the benefit of anticipating doctor movements?",
        options: ["Makes you look good", "Saves supplies", "Improves speed and reduces chair time", "Avoids insurance errors"],
        answer: "Improves speed and reduces chair time"
      },
      {
        question: "What technique helps maintain visibility while assisting?",
        options: ["Retract with fingers only", "Keep mouth open", "Use mirror and suction together", "Spray air constantly"],
        answer: "Use mirror and suction together"
      },
      {
        question: "What should you avoid during chairside assisting?",
        options: ["Looking into the mouth", "Leaning too close or bumping the doctor", "Holding suction steady", "Adjusting lighting"],
        answer: "Leaning too close or bumping the doctor"
      },
      {
        question: "How can you tell what the doctor needs next?",
        options: ["Always ask", "Wait until they say something", "Learn the flow of each procedure and body cues", "Guess"],
        answer: "Learn the flow of each procedure and body cues"
      },
      {
        question: "What’s a good communication technique during a procedure?",
        options: ["Talk over the doctor", "Use non-verbal cues and eye contact", "Leave the room to ask", "Ask the patient"],
        answer: "Use non-verbal cues and eye contact"
      },
      {
        question: "What does good suction technique help reduce?",
        options: ["Noise", "Caries", "Aerosols and moisture", "Cost"],
        answer: "Aerosols and moisture"
      }
    ]
  }
];

export default function AssistantTab() {
  const [quizResults, setQuizResults] = useState({});

  const handleQuizSubmit = (title, score) => {
    setQuizResults(prev => ({ ...prev, [title]: score }));
  };

  return (
    <div className="p-6 grid gap-6">
      {assistantModules.map((module, idx) => (
        <Card key={idx} className="p-4 rounded-2xl shadow">
          <h2 className="text-xl font-bold mb-2">{module.title}</h2>
          <p className="mb-4">{module.description}</p>
          <img src={module.image} alt={module.title} className="mb-4 w-full max-w-md rounded" />
          <ul className="list-disc ml-6 mb-4">
            {module.steps.map((step, i) => (
              <li key={i}>{step}</li>
            ))}
          </ul>
          <Quiz 
            module={module.title} 
            questions={module.quiz} 
            onSubmit={handleQuizSubmit} 
          />
          {quizResults[module.title] >= 90 && (
            <p className="text-green-600 font-semibold mt-2">✅ Passed with {quizResults[module.title]}%</p>
          )}
        </Card>
      ))}
    </div>
  );
}

function Quiz({ module, questions, onSubmit }) {
  const [answers, setAnswers] = useState({});
  const [submitted, setSubmitted] = useState(false);
  const [score, setScore] = useState(null);

  const handleChange = (qIndex, value) => {
    setAnswers(prev => ({ ...prev, [qIndex]: value }));
  };

  const handleSubmit = () => {
    let correct = 0;
    questions.forEach((q, i) => {
      if (answers[i] === q.answer) correct++;
    });
    const result = Math.round((correct / questions.length) * 100);
    setScore(result);
    setSubmitted(true);
    onSubmit(module, result);
  };

  return (
    <div className="mt-6">
      <h3 className="font-semibold text-lg mb-2">Quiz</h3>
      {questions.map((q, i) => (
        <div key={i} className="mb-4">
          <p className="mb-1 font-medium">{i + 1}. {q.question}</p>
          {q.options.map((opt, j) => (
            <label key={j} className="block">
              <input
                type="radio"
                name={`q-${module}-${i}`}
                value={opt}
                onChange={() => handleChange(i, opt)}
                disabled={submitted}
              /> {opt}
            </label>
          ))}
        </div>
      ))}
      {!submitted && (
        <Button onClick={handleSubmit}>Submit Quiz</Button>
      )}
      {submitted && (
        <p className="mt-2 font-semibold">Score: {score}%</p>
      )}
    </div>
  );
}
