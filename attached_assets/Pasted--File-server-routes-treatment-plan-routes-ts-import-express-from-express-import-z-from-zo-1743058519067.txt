// File: server/routes/treatment-plan-routes.ts
import express from 'express';
import { z } from 'zod';
import { prisma } from '../db';
import { requireAuth } from '../auth';
import { generateTreatmentPlanAI } from '../services/ai-service-integration';

const router = express.Router();

// Input schema
const TreatmentPlanRequestSchema = z.object({
  patientId: z.string(),
  includeXrays: z.boolean().optional(),
  includePerio: z.boolean().optional(),
  includeRestorative: z.boolean().optional(),
});

router.post('/generate-treatment-plan', requireAuth, async (req, res) => {
  try {
    const { patientId, includeXrays, includePerio, includeRestorative } = TreatmentPlanRequestSchema.parse(req.body);

    const patient = await prisma.patient.findUnique({ where: { id: patientId }, include: {
      medicalHistory: true,
      restorativeChart: includeRestorative,
      perioChart: includePerio,
      xrays: includeXrays,
      notes: true,
    }});

    if (!patient) return res.status(404).json({ error: 'Patient not found' });

    const aiResult = await generateTreatmentPlanAI({ patient });

    const draft = await prisma.treatmentPlan.create({
      data: {
        patientId,
        aiDraft: aiResult.plan,
        reasoning: aiResult.reasoning,
        confidence: aiResult.confidence,
        status: 'draft',
      },
    });

    return res.json(draft);
  } catch (err) {
    console.error('[generate-treatment-plan]', err);
    return res.status(400).json({ error: 'Invalid input or server error' });
  }
});

// Approve/Update endpoint
router.post('/approve-treatment-plan', requireAuth, async (req, res) => {
  try {
    const { planId, approvedPlan, providerNote } = req.body;

    const approved = await prisma.treatmentPlan.update({
      where: { id: planId },
      data: {
        approvedPlan,
        providerNote,
        status: 'approved',
        approvedAt: new Date(),
      },
    });

    return res.json(approved);
  } catch (err) {
    console.error('[approve-treatment-plan]', err);
    return res.status(500).json({ error: 'Server error approving plan' });
  }
});

export default router;
