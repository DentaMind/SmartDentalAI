import React, { useState } from "react";
import { ToothDiagram } from "./ToothDiagram";
import { useRestorativeAI } from "@/lib/hooks/useRestorativeAI";
import { usePatientContext } from "@/lib/context/PatientContext";
import { updatePatientNotes } from "@/lib/api/patient";

interface ToothSurface {
  occlusal?: boolean;
  buccal?: boolean;
  lingual?: boolean;
  mesial?: boolean;
  distal?: boolean;
  [key: string]: boolean | undefined;
}

interface Tooth {
  number: number;
  surfaces: ToothSurface;
  hasRootCanal?: boolean;
  hasPostCore?: boolean;
  hasCrown?: boolean;
  missing?: boolean;
}

export const RestorativeChart: React.FC = () => {
  const { patient } = usePatientContext();
  const [chart, setChart] = useState<Record<number, Tooth>>({});
  const [selectedTooth, setSelectedTooth] = useState<number | null>(null);
  const { generateRestorativeNote } = useRestorativeAI();

  const handleSurfaceClick = (toothNumber: number, surface: keyof ToothSurface) => {
    setChart((prev) => {
      const currentTooth = prev[toothNumber] || { number: toothNumber, surfaces: {} };
      const currentSurfaceState = currentTooth.surfaces[surface] || false;
      return {
        ...prev,
        [toothNumber]: {
          ...currentTooth,
          surfaces: {
            ...currentTooth.surfaces,
            [surface]: !currentSurfaceState,
          },
        },
      };
    });
  };

  const toggleTreatment = (toothNumber: number, type: keyof Omit<Tooth, 'number' | 'surfaces'>) => {
    setChart((prev) => {
      const currentTooth = prev[toothNumber] || { number: toothNumber, surfaces: {} };
      return {
        ...prev,
        [toothNumber]: {
          ...currentTooth,
          [type]: !currentTooth[type],
        },
      };
    });
  };

  const generateNote = async () => {
    const response = await generateRestorativeNote(chart);
    if (response && patient?.id) {
      await updatePatientNotes(patient.id, response);
      alert("AI-generated restorative note saved to patient record.");
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-xl font-bold mb-2">Restorative Chart</h2>
      <div className="grid grid-cols-8 gap-2">
        {[...Array(32)].map((_, i) => {
          const number = i + 1;
          return (
            <ToothDiagram
              key={number}
              tooth={chart[number] || { number, surfaces: {} }}
              onClickSurface={(surface) => handleSurfaceClick(number, surface)}
              onSelect={() => setSelectedTooth(number)}
            />
          );
        })}
      </div>

      {selectedTooth && (
        <div className="mt-4 border-t pt-4">
          <h3 className="text-md font-semibold mb-1">Tooth #{selectedTooth} Options</h3>
          <div className="flex gap-4">
            <button onClick={() => toggleTreatment(selectedTooth, "hasRootCanal")}>RCT</button>
            <button onClick={() => toggleTreatment(selectedTooth, "hasPostCore")}>Post & Core</button>
            <button onClick={() => toggleTreatment(selectedTooth, "hasCrown")}>Crown</button>
            <button onClick={() => toggleTreatment(selectedTooth, "missing")}>Missing</button>
          </div>
        </div>
      )}

      <div className="mt-6">
        <button
          className="bg-green-500 text-white px-4 py-2 rounded"
          onClick={generateNote}
        >
          Generate AI Restorative Note
        </button>
      </div>
    </div>
  );
};