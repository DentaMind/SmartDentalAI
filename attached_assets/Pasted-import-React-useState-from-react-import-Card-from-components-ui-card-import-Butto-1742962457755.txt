import React, { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

const assistantModules = [
  // Existing modules...
  {
    title: "Instrument Setup by Procedure",
    description: "How to properly set up trays for common procedures, including diagnostic, restorative, surgical, and hygiene setups.",
    steps: [
      "Identify the procedure type and doctor preferences (if any).",
      "Use a clean tray and barrier before laying out any instruments.",
      "For diagnostic exams: mirror, explorer, cotton pliers, 2x2 gauze, air-water tip, and perio probe.",
      "For restorative: add high-speed and slow-speed handpieces, burs, matrix bands, cotton rolls, and anesthetic setup.",
      "For surgical: include forceps, elevators, surgical suction, sutures, scalpel, and sterile field setup.",
      "For hygiene: mirror, explorer, scaler, curette, ultrasonic tip, suction, and prophy setup.",
      "Double-check for sterilization indicators and instrument integrity."
    ],
    image: "/images/procedure_setup.png",
    quiz: [
      {
        question: "What’s the first step in setting up a tray?",
        options: ["Grab instruments", "Ask the doctor", "Place a clean barrier", "Use used items"],
        answer: "Place a clean barrier"
      },
      {
        question: "Which instruments are essential for a diagnostic exam?",
        options: ["Scaler and syringe", "Mirror, explorer, cotton pliers", "Scalpel and suction", "Burs and matrix bands"],
        answer: "Mirror, explorer, cotton pliers"
      },
      {
        question: "What is typically included in a restorative tray setup?",
        options: ["Surgical suction", "Ultrasonic tip", "Matrix bands and anesthetic setup", "Suture scissors"],
        answer: "Matrix bands and anesthetic setup"
      },
      {
        question: "Why are sterile indicators important?",
        options: ["To check expiration dates", "For decoration", "To confirm sterilization was completed", "To organize instruments"],
        answer: "To confirm sterilization was completed"
      },
      {
        question: "Which setup requires a sterile field?",
        options: ["Hygiene", "Diagnostic", "Surgical", "Restorative"],
        answer: "Surgical"
      },
      {
        question: "What should you do if an instrument appears damaged?",
        options: ["Use it carefully", "Discard and replace", "Clean it again", "Ignore it"],
        answer: "Discard and replace"
      },
      {
        question: "Which of the following would NOT be on a hygiene tray?",
        options: ["Curette", "Mirror", "Ultrasonic tip", "Scalpel"],
        answer: "Scalpel"
      },
      {
        question: "When are cotton rolls commonly used?",
        options: ["During hygiene", "During surgery", "During restorative procedures", "Only in emergencies"],
        answer: "During restorative procedures"
      },
      {
        question: "What should you confirm before handing the doctor a handpiece?",
        options: ["That it spins", "That it’s sterilized and properly connected", "That it’s sharp", "That it’s warm"],
        answer: "That it’s sterilized and properly connected"
      },
      {
        question: "How can you stay organized when prepping trays?",
        options: ["Lay out everything in advance", "Keep a master setup checklist for each procedure", "Ask a coworker each time", "Wing it"],
        answer: "Keep a master setup checklist for each procedure"
      }
    ]
  }
];

export default function AssistantTab() {
  const [quizResults, setQuizResults] = useState({});

  const handleQuizSubmit = (title, score) => {
    setQuizResults(prev => ({ ...prev, [title]: score }));
  };

  return (
    <div className="p-6 grid gap-6">
      {assistantModules.map((module, idx) => (
        <Card key={idx} className="p-4 rounded-2xl shadow">
          <h2 className="text-xl font-bold mb-2">{module.title}</h2>
          <p className="mb-4">{module.description}</p>
          <img src={module.image} alt={module.title} className="mb-4 w-full max-w-md rounded" />
          <ul className="list-disc ml-6 mb-4">
            {module.steps.map((step, i) => (
              <li key={i}>{step}</li>
            ))}
          </ul>
          <Quiz 
            module={module.title} 
            questions={module.quiz} 
            onSubmit={handleQuizSubmit} 
          />
          {quizResults[module.title] >= 90 && (
            <p className="text-green-600 font-semibold mt-2">✅ Passed with {quizResults[module.title]}%</p>
          )}
        </Card>
      ))}
    </div>
  );
}

function Quiz({ module, questions, onSubmit }) {
  const [answers, setAnswers] = useState({});
  const [submitted, setSubmitted] = useState(false);
  const [score, setScore] = useState(null);

  const handleChange = (qIndex, value) => {
    setAnswers(prev => ({ ...prev, [qIndex]: value }));
  };

  const handleSubmit = () => {
    let correct = 0;
    questions.forEach((q, i) => {
      if (answers[i] === q.answer) correct++;
    });
    const result = Math.round((correct / questions.length) * 100);
    setScore(result);
    setSubmitted(true);
    onSubmit(module, result);
  };

  return (
    <div className="mt-6">
      <h3 className="font-semibold text-lg mb-2">Quiz</h3>
      {questions.map((q, i) => (
        <div key={i} className="mb-4">
          <p className="mb-1 font-medium">{i + 1}. {q.question}</p>
          {q.options.map((opt, j) => (
            <label key={j} className="block">
              <input
                type="radio"
                name={`q-${module}-${i}`}
                value={opt}
                onChange={() => handleChange(i, opt)}
                disabled={submitted}
              /> {opt}
            </label>
          ))}
        </div>
      ))}
      {!submitted && (
        <Button onClick={handleSubmit}>Submit Quiz</Button>
      )}
      {submitted && (
        <p className="mt-2 font-semibold">Score: {score}%</p>
      )}
    </div>
  );
}