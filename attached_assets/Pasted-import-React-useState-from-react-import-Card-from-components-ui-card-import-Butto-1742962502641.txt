import React, { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

const assistantModules = [
  // Existing modules...
  {
    title: "Making Temporaries",
    description: "Step-by-step instructions for fabricating temporary crowns and bridges, including patient safety and comfort considerations.",
    steps: [
      "Review the procedure and doctor preference (pre-op vs post-op impression, material, etc.).",
      "Place retraction cord (if needed) and ensure isolation.",
      "Use a pre-op impression or matrix to form the temporary.",
      "Load bis-acrylic into the matrix and place it in the patient’s mouth with gentle pressure.",
      "Allow material to set fully before removing and trimming with appropriate burs.",
      "Check occlusion, contour, and margins. Smooth with polishers.",
      "Cement the temporary with temporary cement and confirm fit with the doctor."
    ],
    image: "/images/making_temporaries.png",
    quiz: [
      {
        question: "What is typically used to form the shape of a temporary crown?",
        options: ["Cotton roll", "Retraction cord", "Impression matrix or pre-op impression", "Mirror handle"],
        answer: "Impression matrix or pre-op impression"
      },
      {
        question: "Why might retraction cord be used before making a temp?",
        options: ["To clean the area", "To take X-rays", "To expose margins and control bleeding", "To harden enamel"],
        answer: "To expose margins and control bleeding"
      },
      {
        question: "What material is commonly used for temporary crowns?",
        options: ["Alginate", "Bite registration", "Bis-acrylic composite", "Zinc oxide"],
        answer: "Bis-acrylic composite"
      },
      {
        question: "When should the temporary be trimmed?",
        options: ["Before it sets", "After full set and removal from mouth", "Before placing in the mouth", "After cementing"],
        answer: "After full set and removal from mouth"
      },
      {
        question: "What should be checked before cementing a temporary?",
        options: ["Color only", "Doctor's schedule", "Fit, margins, and occlusion", "Insurance status"],
        answer: "Fit, margins, and occlusion"
      },
      {
        question: "Which cement is typically used for temporaries?",
        options: ["Permanent resin cement", "Zinc phosphate", "Temporary cement", "Gutta percha"],
        answer: "Temporary cement"
      },
      {
        question: "What can happen if the temp is too high in occlusion?",
        options: ["It fits better", "It causes tooth sensitivity or pain", "It strengthens the tooth", "Nothing"],
        answer: "It causes tooth sensitivity or pain"
      },
      {
        question: "Why is polishing the temp important?",
        options: ["Looks nice for photos", "Prevents patient complaints and plaque buildup", "For coloring", "For insurance"],
        answer: "Prevents patient complaints and plaque buildup"
      },
      {
        question: "Who should always verify the fit before cementing?",
        options: ["Assistant", "Front desk", "Doctor", "Lab tech"],
        answer: "Doctor"
      },
      {
        question: "If a temp dislodges after placement, what’s the first step?",
        options: ["Tell the front desk", "Call insurance", "Clean and re-cement after checking fit", "Take a new impression"],
        answer: "Clean and re-cement after checking fit"
      }
    ]
  }
];

export default function AssistantTab() {
  const [quizResults, setQuizResults] = useState({});

  const handleQuizSubmit = (title, score) => {
    setQuizResults(prev => ({ ...prev, [title]: score }));
  };

  return (
    <div className="p-6 grid gap-6">
      {assistantModules.map((module, idx) => (
        <Card key={idx} className="p-4 rounded-2xl shadow">
          <h2 className="text-xl font-bold mb-2">{module.title}</h2>
          <p className="mb-4">{module.description}</p>
          <img src={module.image} alt={module.title} className="mb-4 w-full max-w-md rounded" />
          <ul className="list-disc ml-6 mb-4">
            {module.steps.map((step, i) => (
              <li key={i}>{step}</li>
            ))}
          </ul>
          <Quiz 
            module={module.title} 
            questions={module.quiz} 
            onSubmit={handleQuizSubmit} 
          />
          {quizResults[module.title] >= 90 && (
            <p className="text-green-600 font-semibold mt-2">✅ Passed with {quizResults[module.title]}%</p>
          )}
        </Card>
      ))}
    </div>
  );
}

function Quiz({ module, questions, onSubmit }) {
  const [answers, setAnswers] = useState({});
  const [submitted, setSubmitted] = useState(false);
  const [score, setScore] = useState(null);

  const handleChange = (qIndex, value) => {
    setAnswers(prev => ({ ...prev, [qIndex]: value }));
  };

  const handleSubmit = () => {
    let correct = 0;
    questions.forEach((q, i) => {
      if (answers[i] === q.answer) correct++;
    });
    const result = Math.round((correct / questions.length) * 100);
    setScore(result);
    setSubmitted(true);
    onSubmit(module, result);
  };

  return (
    <div className="mt-6">
      <h3 className="font-semibold text-lg mb-2">Quiz</h3>
      {questions.map((q, i) => (
        <div key={i} className="mb-4">
          <p className="mb-1 font-medium">{i + 1}. {q.question}</p>
          {q.options.map((opt, j) => (
            <label key={j} className="block">
              <input
                type="radio"
                name={`q-${module}-${i}`}
                value={opt}
                onChange={() => handleChange(i, opt)}
                disabled={submitted}
              /> {opt}
            </label>
          ))}
        </div>
      ))}
      {!submitted && (
        <Button onClick={handleSubmit}>Submit Quiz</Button>
      )}
      {submitted && (
        <p className="mt-2 font-semibold">Score: {score}%</p>
      )}
    </div>
  );
}
