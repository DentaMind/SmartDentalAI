import React, { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

const assistantModules = [
  // Existing modules...
  {
    title: "Lab Case Management",
    description: "Proper protocol for tracking, sending, and receiving dental lab cases including documentation and quality control.",
    steps: [
      "Confirm the lab slip is filled out completely with case type, shade, return date, and doctor’s signature.",
      "Label impressions or models clearly with patient name and date of service.",
      "Log outgoing cases in the lab tracking system or binder.",
      "Package materials securely and send to the correct lab with the completed Rx.",
      "Upon case return, verify contents match prescription and check for defects or missing components.",
      "Notify the doctor the case has arrived and place it in the designated storage area by date.",
      "Update the lab tracking log with the return date and initials of the staff receiving it."
    ],
    image: "/images/lab_case.png",
    quiz: [
      {
        question: "What must be included on the lab slip before sending a case?",
        options: ["Shade, return date, doctor’s signature", "Only patient name", "Nothing if it’s routine", "Your initials only"],
        answer: "Shade, return date, doctor’s signature"
      },
      {
        question: "Where should you log lab cases before sending them out?",
        options: ["In the trash", "On a sticky note", "In the lab tracking binder/system", "In the front desk drawer"],
        answer: "In the lab tracking binder/system"
      },
      {
        question: "How should impressions or models be labeled?",
        options: ["Just the patient initials", "Doctor name", "Patient name and date of service", "Nothing — it’s obvious"],
        answer: "Patient name and date of service"
      },
      {
        question: "What is a key step upon receiving a lab case?",
        options: ["Send it back for fun", "Place it directly into the operatory", "Verify contents match the Rx and check for defects", "Store it in your locker"],
        answer: "Verify contents match the Rx and check for defects"
      },
      {
        question: "What should you do if the lab case is missing parts?",
        options: ["Try to fix it", "Blame the front desk", "Contact the lab and notify the doctor immediately", "Ignore it"],
        answer: "Contact the lab and notify the doctor immediately"
      },
      {
        question: "Where should lab cases be stored once returned?",
        options: ["In the hallway", "By the autoclave", "In a designated bin labeled by return date", "On the doctor’s chair"],
        answer: "In a designated bin labeled by return date"
      },
      {
        question: "Who should be informed when a lab case arrives?",
        options: ["The front desk", "The patient", "The doctor", "The supply rep"],
        answer: "The doctor"
      },
      {
        question: "What is the final step of lab case tracking?",
        options: ["Toss the Rx", "Sign and date the tracking log with return info", "Call the patient", "Open the lab box and throw away foam"],
        answer: "Sign and date the tracking log with return info"
      },
      {
        question: "Why is proper lab tracking important?",
        options: ["To get a raise", "To avoid missed appointments or lost cases", "For office decoration", "To file insurance"],
        answer: "To avoid missed appointments or lost cases"
      },
      {
        question: "What should the assistant do if unsure how to fill out a lab Rx?",
        options: ["Guess based on last case", "Leave it blank", "Ask the doctor for help", "Copy someone else’s"],
        answer: "Ask the doctor for help"
      }
    ]
  }
];

export default function AssistantTab() {
  const [quizResults, setQuizResults] = useState({});

  const handleQuizSubmit = (title, score) => {
    setQuizResults(prev => ({ ...prev, [title]: score }));
  };

  return (
    <div className="p-6 grid gap-6">
      {assistantModules.map((module, idx) => (
        <Card key={idx} className="p-4 rounded-2xl shadow">
          <h2 className="text-xl font-bold mb-2">{module.title}</h2>
          <p className="mb-4">{module.description}</p>
          <img src={module.image} alt={module.title} className="mb-4 w-full max-w-md rounded" />
          <ul className="list-disc ml-6 mb-4">
            {module.steps.map((step, i) => (
              <li key={i}>{step}</li>
            ))}
          </ul>
          <Quiz 
            module={module.title} 
            questions={module.quiz} 
            onSubmit={handleQuizSubmit} 
          />
          {quizResults[module.title] >= 90 && (
            <p className="text-green-600 font-semibold mt-2">✅ Passed with {quizResults[module.title]}%</p>
          )}
        </Card>
      ))}
    </div>
  );
}

function Quiz({ module, questions, onSubmit }) {
  const [answers, setAnswers] = useState({});
  const [submitted, setSubmitted] = useState(false);
  const [score, setScore] = useState(null);

  const handleChange = (qIndex, value) => {
    setAnswers(prev => ({ ...prev, [qIndex]: value }));
  };

  const handleSubmit = () => {
    let correct = 0;
    questions.forEach((q, i) => {
      if (answers[i] === q.answer) correct++;
    });
    const result = Math.round((correct / questions.length) * 100);
    setScore(result);
    setSubmitted(true);
    onSubmit(module, result);
  };

  return (
    <div className="mt-6">
      <h3 className="font-semibold text-lg mb-2">Quiz</h3>
      {questions.map((q, i) => (
        <div key={i} className="mb-4">
          <p className="mb-1 font-medium">{i + 1}. {q.question}</p>
          {q.options.map((opt, j) => (
            <label key={j} className="block">
              <input
                type="radio"
                name={`q-${module}-${i}`}
                value={opt}
                onChange={() => handleChange(i, opt)}
                disabled={submitted}
              /> {opt}
            </label>
          ))}
        </div>
      ))}
      {!submitted && (
        <Button onClick={handleSubmit}>Submit Quiz</Button>
      )}
      {submitted && (
        <p className="mt-2 font-semibold">Score: {score}%</p>
      )}
    </div>
  );
}