import React, { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

const assistantModules = [
  // Existing modules...
  {
    title: "Cleaning and Room Turnover",
    description: "Proper procedure for disinfecting operatories between patients and maintaining a sterile clinical environment in line with ADA and OSHA standards.",
    steps: [
      "Wash hands and wear fresh gloves before starting turnover.",
      "Remove all disposable barriers and contaminated instruments from the operatory.",
      "Wipe down all touch surfaces (light handles, chair controls, countertops) with an EPA-approved disinfectant.",
      "Allow the disinfectant to sit for its full contact time (usually 3–5 minutes).",
      "Replace barriers and set up the tray according to the next scheduled procedure.",
      "Ensure no items are cross-contaminated when restocking.",
      "Dispose of waste properly and check for sharp items in trash."
    ],
    image: "/images/room_turnover.png",
    quiz: [
      {
        question: "What is the first step before starting operatory cleaning?",
        options: ["Grab wipes", "Remove trash", "Wash hands and wear new gloves", "Check schedule"],
        answer: "Wash hands and wear new gloves"
      },
      {
        question: "What should you do with contaminated instruments?",
        options: ["Leave them in the room", "Rinse and reuse", "Transport to sterilization safely", "Wipe with alcohol"],
        answer: "Transport to sterilization safely"
      },
      {
        question: "Which surfaces should be disinfected between patients?",
        options: ["Only countertops", "Only chair and tray", "All high-touch surfaces", "Floors only"],
        answer: "All high-touch surfaces"
      },
      {
        question: "What does 'contact time' refer to?",
        options: ["Time you spend cleaning", "Time disinfectant must remain wet to be effective", "Time between patients", "Time to reschedule"],
        answer: "Time disinfectant must remain wet to be effective"
      },
      {
        question: "What should be done before setting up the next procedure tray?",
        options: ["Refill water bottle", "Place barriers and confirm disinfectant dried", "Open patient chart", "Wipe gloves with alcohol"],
        answer: "Place barriers and confirm disinfectant dried"
      },
      {
        question: "Why is proper disposal of sharps important?",
        options: ["To keep the room tidy", "To meet HIPAA laws", "To prevent injury and OSHA violations", "To avoid paperwork"],
        answer: "To prevent injury and OSHA violations"
      },
      {
        question: "What is the appropriate action if you notice blood on a handle after wiping?",
        options: ["Ignore it", "Re-wipe and let sit for full contact time", "Tell the front desk", "Use alcohol swab only"],
        answer: "Re-wipe and let sit for full contact time"
      },
      {
        question: "Where should you place used barriers?",
        options: ["In the sharps bin", "In general waste", "In biohazard bag if visibly soiled", "Leave on tray"],
        answer: "In biohazard bag if visibly soiled"
      },
      {
        question: "What must you avoid during room restocking?",
        options: ["Using clean gloves", "Working quickly", "Cross-contamination from dirty surfaces", "Asking for help"],
        answer: "Cross-contamination from dirty surfaces"
      },
      {
        question: "What’s a good final check before seating the next patient?",
        options: ["Play music", "Ask if anyone needs the room", "Ensure the chair, handles, and tray are fully disinfected", "Turn off the light"],
        answer: "Ensure the chair, handles, and tray are fully disinfected"
      }
    ]
  }
];

export default function AssistantTab() {
  const [quizResults, setQuizResults] = useState({});

  const handleQuizSubmit = (title, score) => {
    setQuizResults(prev => ({ ...prev, [title]: score }));
  };

  return (
    <div className="p-6 grid gap-6">
      {assistantModules.map((module, idx) => (
        <Card key={idx} className="p-4 rounded-2xl shadow">
          <h2 className="text-xl font-bold mb-2">{module.title}</h2>
          <p className="mb-4">{module.description}</p>
          <img src={module.image} alt={module.title} className="mb-4 w-full max-w-md rounded" />
          <ul className="list-disc ml-6 mb-4">
            {module.steps.map((step, i) => (
              <li key={i}>{step}</li>
            ))}
          </ul>
          <Quiz 
            module={module.title} 
            questions={module.quiz} 
            onSubmit={handleQuizSubmit} 
          />
          {quizResults[module.title] >= 90 && (
            <p className="text-green-600 font-semibold mt-2">✅ Passed with {quizResults[module.title]}%</p>
          )}
        </Card>
      ))}
    </div>
  );
}

function Quiz({ module, questions, onSubmit }) {
  const [answers, setAnswers] = useState({});
  const [submitted, setSubmitted] = useState(false);
  const [score, setScore] = useState(null);

  const handleChange = (qIndex, value) => {
    setAnswers(prev => ({ ...prev, [qIndex]: value }));
  };

  const handleSubmit = () => {
    let correct = 0;
    questions.forEach((q, i) => {
      if (answers[i] === q.answer) correct++;
    });
    const result = Math.round((correct / questions.length) * 100);
    setScore(result);
    setSubmitted(true);
    onSubmit(module, result);
  };

  return (
    <div className="mt-6">
      <h3 className="font-semibold text-lg mb-2">Quiz</h3>
      {questions.map((q, i) => (
        <div key={i} className="mb-4">
          <p className="mb-1 font-medium">{i + 1}. {q.question}</p>
          {q.options.map((opt, j) => (
            <label key={j} className="block">
              <input
                type="radio"
                name={`q-${module}-${i}`}
                value={opt}
                onChange={() => handleChange(i, opt)}
                disabled={submitted}
              /> {opt}
            </label>
          ))}
        </div>
      ))}
      {!submitted && (
        <Button onClick={handleSubmit}>Submit Quiz</Button>
      )}
      {submitted && (
        <p className="mt-2 font-semibold">Score: {score}%</p>
      )}
    </div>
  );
}
