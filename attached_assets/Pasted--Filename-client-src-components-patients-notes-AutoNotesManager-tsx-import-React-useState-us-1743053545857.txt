// Filename: client/src/components/patients/notes/AutoNotesManager.tsx

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { getDraftNoteForPatient, submitApprovedNote } from '@/lib/api/notes';
import { useVoiceToText } from '@/lib/hooks/useVoiceToText';
import { useTemplates } from '@/lib/hooks/useTemplates';

interface AutoNotesManagerProps {
  patientId: string;
  providerId: string;
  onNotePosted: () => void;
}

export default function AutoNotesManager({ patientId, providerId, onNotePosted }: AutoNotesManagerProps) {
  const [noteDraft, setNoteDraft] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const { transcript, startListening, stopListening, isRecording } = useVoiceToText();
  const { templates } = useTemplates();

  useEffect(() => {
    async function fetchDraft() {
      try {
        const draft = await getDraftNoteForPatient(patientId);
        setNoteDraft(draft || '');
      } catch (err) {
        setError('Failed to load draft note.');
      } finally {
        setLoading(false);
      }
    }
    fetchDraft();
  }, [patientId]);

  useEffect(() => {
    if (transcript) {
      setNoteDraft((prev) => prev + '\n' + transcript);
    }
  }, [transcript]);

  const handleApprove = async () => {
    try {
      await submitApprovedNote({ patientId, providerId, note: noteDraft });
      onNotePosted();
    } catch (err) {
      setError('Failed to save note.');
    }
  };

  const insertTemplate = (template: string) => {
    setNoteDraft((prev) => template + '\n' + prev);
  };

  if (loading) return <p>Loading note...</p>;

  return (
    <div className="space-y-4 p-4 bg-white rounded shadow">
      <h2 className="text-lg font-bold">Draft Patient Note</h2>

      {templates.length > 0 && (
        <div className="space-x-2">
          {templates.map((t) => (
            <Button key={t.name} onClick={() => insertTemplate(t.content)} variant="outline">
              {t.name}
            </Button>
          ))}
        </div>
      )}

      <Textarea
        value={noteDraft}
        onChange={(e) => setNoteDraft(e.target.value)}
        rows={12}
        className="w-full"
      />

      <div className="flex gap-2">
        <Button onClick={handleApprove}>Approve & Save</Button>
        <Button variant="ghost" onClick={isRecording ? stopListening : startListening}>
          {isRecording ? 'Stop Voice Input' : 'Start Voice Input'}
        </Button>
      </div>

      {error && <p className="text-red-500 text-sm">{error}</p>}
    </div>
  );
}
