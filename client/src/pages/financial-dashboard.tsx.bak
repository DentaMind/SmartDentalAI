
import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { TaxReport } from "@/components/financial/tax-report";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import {
  DollarSign,
  TrendingUp,
  FileText,
  AlertCircle,
  Calendar,
  BarChart as BarChartIcon,
  PieChart,
  Clock
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { api } from "@/lib/api";
import { format, subMonths, startOfMonth, endOfMonth } from "date-fns";
import { BarChart, LineChart, PieChart as PieChartComponent } from "@/components/ui/visualizations";
import { TaxReporting } from '@/components/financial/tax-reporting';
import { InsuranceClaimTracker } from '@/components/financial/insurance-claim-tracker';
import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { TaxReport } from "@/components/financial/tax-report";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import {
  DollarSign,
  TrendingUp,
  FileText,
  AlertCircle,
  Calendar,
  BarChart as BarChartIcon,
  PieChart,
  Clock
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { api } from "@/lib/api";
import { format, subMonths, startOfMonth, endOfMonth } from "date-fns";
import { BarChart, LineChart, PieChart as PieChartComponent } from "@/components/ui/visualizations";

export default function FinancialDashboardPage() {
  const today = new Date();
  const currentYear = today.getFullYear();
  
  // Date range for financial summary
  const [dateRange, setDateRange] = useState({
    start: startOfMonth(subMonths(today, 12)),
    end: endOfMonth(today)
  });
  
  // Fetch financial summary data
  const { data: financialSummary } = useQuery({
    queryKey: ["/api/financial/summary", dateRange.start, dateRange.end],
    queryFn: () => api.get("/api/financial/summary", {
      params: {
        startDate: dateRange.start.toISOString(),
        endDate: dateRange.end.toISOString()
      }
    }).then(res => res.data)
  });
  
  // Fetch financial forecast
  const { data: forecast } = useQuery({
    queryKey: ["/api/financial/forecast"],
    queryFn: () => api.get("/api/financial/forecast").then(res => res.data)
  });
  
  // Fetch aging report
  const { data: agingReport } = useQuery({
    queryKey: ["/api/financial/aging-report"],
    queryFn: () => api.get("/api/financial/aging-report").then(res => res.data)
  });
  
  // Fetch profitability report
  const { data: profitability } = useQuery({
    queryKey: ["/api/financial/profitability", currentYear],
    queryFn: () => api.get(`/api/financial/profitability/${currentYear}`).then(res => res.data)
  });
  
  // Prepare revenue by method chart data
  const revenueByMethodData = {
    labels: financialSummary?.paymentMethods ? 
      ["Cash", "Credit Card", "Check", "Insurance", "Other"] : [],
    datasets: [{
      label: "Revenue by Payment Method",
      data: financialSummary?.paymentMethods ? 
        [
          financialSummary.paymentMethods.cash,
          financialSummary.paymentMethods.creditCard,
          financialSummary.paymentMethods.check,
          financialSummary.paymentMethods.insurance,
          financialSummary.paymentMethods.other
        ] : [],
      backgroundColor: [
        "rgb(54, 162, 235, 0.7)",
        "rgb(255, 99, 132, 0.7)",
        "rgb(255, 206, 86, 0.7)",
        "rgb(75, 192, 192, 0.7)",
        "rgb(153, 102, 255, 0.7)"
      ]
    }]
  };
  
  // Prepare forecast chart data
  const forecastData = {
    labels: forecast?.forecastData.map((d: any) => d.month) || [],
    datasets: [{
      label: "Revenue Forecast",
      data: forecast?.forecastData.map((d: any) => d.revenue) || [],
      borderColor: "rgb(99, 102, 241)",
      backgroundColor: "rgba(99, 102, 241, 0.5)",
      tension: 0.3,
      fill: true
    }]
  };
  
  // Prepare aging report chart data
  const agingReportData = {
    labels: ["Current", "31-60 Days", "61-90 Days", "91-120 Days", "120+ Days"],
    datasets: [{
      label: "Outstanding Claims by Age",
      data: agingReport ? [
        agingReport.agingBuckets.current.value,
        agingReport.agingBuckets.thirtyDays.value,
        agingReport.agingBuckets.sixtyDays.value,
        agingReport.agingBuckets.ninetyDays.value,
        agingReport.agingBuckets.overNinetyDays.value
      ] : [],
      backgroundColor: [
        "rgb(16, 185, 129, 0.7)",
        "rgb(245, 158, 11, 0.7)",
        "rgb(249, 115, 22, 0.7)",
        "rgb(239, 68, 68, 0.7)",
        "rgb(220, 38, 38, 0.7)"
      ]
    }]
  };
  
  // Prepare profitability chart data
  const profitabilityData = {
    labels: profitability ? Object.keys(profitability.expenses) : [],
    datasets: [{
      label: "Expenses Breakdown",
      data: profitability ? Object.values(profitability.expenses) : [],
      backgroundColor: [
        "rgb(59, 130, 246, 0.7)",
        "rgb(16, 185, 129, 0.7)",
        "rgb(245, 158, 11, 0.7)",
        "rgb(239, 68, 68, 0.7)",
        "rgb(139, 92, 246, 0.7)",
        "rgb(236, 72, 153, 0.7)",
        "rgb(248, 113, 113, 0.7)",
        "rgb(52, 211, 153, 0.7)",
        "rgb(251, 191, 36, 0.7)",
        "rgb(129, 140, 248, 0.7)"
      ]
    }]
  };
  
  // Time period options
  const timePeriods = [
    { label: "Last 30 Days", value: "30days" },
    { label: "Last 90 Days", value: "90days" },
    { label: "Last 6 Months", value: "6months" },
    { label: "Last 12 Months", value: "12months" },
    { label: "Year to Date", value: "ytd" },
    { label: "All Time", value: "all" }
  ];
  
  // Change time period handler
  const handleTimePeriodChange = (value: string) => {
    let start = new Date();
    const end = endOfMonth(today);
    
    switch (value) {
      case "30days":
        start = subMonths(today, 1);
        break;
      case "90days":
        start = subMonths(today, 3);
        break;
      case "6months":
        start = subMonths(today, 6);
        break;
      case "12months":
        start = subMonths(today, 12);
        break;
      case "ytd":
        start = new Date(currentYear, 0, 1);
        break;
      case "all":
        start = new Date(2020, 0, 1); // Arbitrary start date for "all time"
        break;
    }
    
    setDateRange({ start, end });
  };
  
  return (
    <div className="container mx-auto p-4 py-6 max-w-7xl">
      <h1 className="text-3xl font-bold mb-6">Financial Dashboard</h1>
      
      <div className="mb-6 flex justify-between items-center">
        <div className="text-sm text-muted-foreground">
          <Calendar className="h-4 w-4 inline-block mr-1" />
          <span>
            {format(dateRange.start, "MMM d, yyyy")} - {format(dateRange.end, "MMM d, yyyy")}
          </span>
        </div>
        
        <Select
          defaultValue="12months"
          onValueChange={handleTimePeriodChange}
        >
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Select time period" />
          </SelectTrigger>
          <SelectContent>
            {timePeriods.map(period => (
              <SelectItem key={period.value} value={period.value}>
                {period.label}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      
      <Tabs defaultValue="overview">
        <TabsList className="mb-4">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="revenue">Revenue</TabsTrigger>
          <TabsTrigger value="tax">Tax Reports</TabsTrigger>
          <TabsTrigger value="forecast">Forecasting</TabsTrigger>
          <TabsTrigger value="profitability">Profitability</TabsTrigger>
        </TabsList>
        
        <TabsContent value="overview">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-sm font-medium text-muted-foreground">
                  Total Revenue
                </CardTitle>
                <DollarSign className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  ${financialSummary?.revenue.toLocaleString() || "0"}
                </div>
                <p className="text-xs text-muted-foreground">
                  Total Revenue
                </p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-sm font-medium text-muted-foreground">
                  Net Revenue
                </CardTitle>
                <TrendingUp className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  ${financialSummary?.netRevenue.toLocaleString() || "0"}
                </div>
                <p className="text-xs text-muted-foreground">
                  After Refunds & Adjustments
                </p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-sm font-medium text-muted-foreground">
                  Transactions
                </CardTitle>
                <FileText className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {financialSummary?.transactionCount.toLocaleString() || "0"}
                </div>
                <p className="text-xs text-muted-foreground">
                  Total Transactions
                </p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-sm font-medium text-muted-foreground">
                  Avg. Transaction
                </CardTitle>
                <AlertCircle className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  ${financialSummary && financialSummary.transactionCount > 0
                    ? (financialSummary.revenue / financialSummary.transactionCount).toFixed(2)
                    : "0.00"
                  }
                </div>
                <p className="text-xs text-muted-foreground">
                  Average Transaction Value
                </p>
              </CardContent>
            </Card>
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Revenue by Payment Method</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="h-80">
                  <PieChartComponent data={revenueByMethodData} />
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>Outstanding Claims Aging</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="h-80">
                  <BarChart data={agingReportData} />
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        <TabsContent value="revenue">
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Revenue Breakdown</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className="space-y-2">
                    <h3 className="text-lg font-medium">Revenue</h3>
                    <div className="text-3xl font-bold">
                      ${financialSummary?.revenue.toLocaleString() || "0"}
                    </div>
                    
                    <div className="mt-4 space-y-2">
                      <div className="flex justify-between text-sm">
                        <span>Patient Payments:</span>
                        <span className="font-medium">
                          ${financialSummary?.paymentMethods?.creditCard || 0 + 
                            financialSummary?.paymentMethods?.cash || 0 + 
                            financialSummary?.paymentMethods?.check || 0
                          }
                        </span>
                      </div>
                      
                      <div className="flex justify-between text-sm">
                        <span>Insurance Payments:</span>
                        <span className="font-medium">
                          ${financialSummary?.paymentMethods?.insurance || 0}
                        </span>
                      </div>
                      
                      <div className="flex justify-between text-sm">
                        <span>Other Payments:</span>
                        <span className="font-medium">
                          ${financialSummary?.paymentMethods?.other || 0}
                        </span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <h3 className="text-lg font-medium">Adjustments</h3>
                    <div className="text-3xl font-bold">
                      ${financialSummary?.adjustments.toLocaleString() || "0"}
                    </div>
                    
                    <div className="mt-4 space-y-2">
                      <div className="flex justify-between text-sm">
                        <span>Insurance Adjustments:</span>
                        <span className="font-medium">
                          ${Math.round(financialSummary?.adjustments * 0.8) || 0}
                        </span>
                      </div>
                      
                      <div className="flex justify-between text-sm">
                        <span>Courtesy Adjustments:</span>
                        <span className="font-medium">
                          ${Math.round(financialSummary?.adjustments * 0.15) || 0}
                        </span>
                      </div>
                      
                      <div className="flex justify-between text-sm">
                        <span>Other Adjustments:</span>
                        <span className="font-medium">
                          ${Math.round(financialSummary?.adjustments * 0.05) || 0}
                        </span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <h3 className="text-lg font-medium">Refunds</h3>
                    <div className="text-3xl font-bold">
                      ${financialSummary?.refunds.toLocaleString() || "0"}
                    </div>
                    
                    <div className="mt-4 space-y-2">
                      <div className="flex justify-between text-sm">
                        <span>Patient Refunds:</span>
                        <span className="font-medium">
                          ${Math.round(financialSummary?.refunds * 0.7) || 0}
                        </span>
                      </div>
                      
                      <div className="flex justify-between text-sm">
                        <span>Insurance Refunds:</span>
                        <span className="font-medium">
                          ${Math.round(financialSummary?.refunds * 0.3) || 0}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>Payment Methods</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                  {financialSummary?.paymentMethods && Object.entries({
                    "Cash": financialSummary.paymentMethods.cash,
                    "Credit Card": financialSummary.paymentMethods.creditCard,
                    "Check": financialSummary.paymentMethods.check,
                    "Insurance": financialSummary.paymentMethods.insurance,
                    "Other": financialSummary.paymentMethods.other
                  }).map(([method, amount]) => (
                    <Card key={method} className="overflow-hidden">
                      <div className="h-2 bg-primary" />
                      <CardContent className="p-4">
                        <h3 className="text-sm font-medium">{method}</h3>
                        <div className="text-2xl font-bold mt-1">
                          ${amount.toLocaleString()}
                        </div>
                        <p className="text-xs text-muted-foreground mt-1">
                          {Math.round((amount / financialSummary.revenue) * 100)}% of total
                        </p>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        <TabsContent value="tax">
          <TaxReport />
        </TabsContent>
        
        <TabsContent value="forecast">
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Revenue Forecast</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="h-80">
                  <LineChart data={forecastData} />
                </div>
                
                {forecast && (
                  <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="space-y-1">
                      <h4 className="text-sm font-medium">Forecast Parameters</h4>
                      <div className="text-sm text-muted-foreground">
                        Baseline: {forecast.forecastParameters.baselinePeriod}
                      </div>
                      <div className="text-sm text-muted-foreground">
                        Growth Rate: {forecast.forecastParameters.growthRate}
                      </div>
                      <div className="text-sm text-muted-foreground">
                        Horizon: {forecast.forecastParameters.forecastHorizon}
                      </div>
                    </div>
                    
                    <div className="space-y-1">
                      <h4 className="text-sm font-medium">Average Monthly Revenue</h4>
                      <div className="text-2xl font-bold">
                        ${forecast.forecastData.reduce((sum: number, d: any) => sum + d.revenue, 0) / 
                          forecast.forecastData.length
                        }
                      </div>
                      <div className="text-sm text-muted-foreground">
                        Projected average over next {forecast.forecastData.length} months
                      </div>
                    </div>
                    
                    <div className="space-y-1">
                      <h4 className="text-sm font-medium">Projected Annual Revenue</h4>
                      <div className="text-2xl font-bold">
                        ${forecast.forecastData.reduce((sum: number, d: any) => sum + d.revenue, 0)}
                      </div>
                      <div className="text-sm text-muted-foreground">
                        Next 12 months projected total
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Growth Opportunities</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-3">
                    <li className="flex items-start gap-2">
                      <TrendingUp className="h-5 w-5 text-green-500 mt-0.5" />
                      <div>
                        <h4 className="font-medium">Increase Case Acceptance</h4>
                        <p className="text-sm text-muted-foreground">
                          Improving case acceptance by 10% could add approximately $50,000 in annual revenue.
                        </p>
                      </div>
                    </li>
                    <li className="flex items-start gap-2">
                      <BarChartIcon className="h-5 w-5 text-blue-500 mt-0.5" />
                      <div>
                        <h4 className="font-medium">Add New Services</h4>
                        <p className="text-sm text-muted-foreground">
                          Adding clear aligner therapy could generate $75,000+ in additional annual revenue.
                        </p>
                      </div>
                    </li>
                    <li className="flex items-start gap-2">
                      <PieChart className="h-5 w-5 text-purple-500 mt-0.5" />
                      <div>
                        <h4 className="font-medium">Reactivate Dormant Patients</h4>
                        <p className="text-sm text-muted-foreground">
                          Reactivating 15% of dormant patients could yield $35,000 in additional annual revenue.
                        </p>
                      </div>
                    </li>
                    <li className="flex items-start gap-2">
                      <Clock className="h-5 w-5 text-amber-500 mt-0.5" />
                      <div>
                        <h4 className="font-medium">Optimize Schedule</h4>
                        <p className="text-sm text-muted-foreground">
                          Reducing no-shows by 5% could add approximately $25,000 in annual production.
                        </p>
                      </div>
                    </li>
                  </ul>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle>Action Plan</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <h4 className="font-medium">Short-term (30 days)</h4>
                    <ul className="text-sm space-y-1 list-disc pl-4">
                      <li>Review and optimize fee schedule</li>
                      <li>Implement automated patient recall system</li>
                      <li>Train team on presenting comprehensive treatment plans</li>
                      <li>Review insurance aging report and follow up on outstanding claims</li>
                    </ul>
                  </div>
                  
                  <div className="space-y-2">
                    <h4 className="font-medium">Medium-term (90 days)</h4>
                    <ul className="text-sm space-y-1 list-disc pl-4">
                      <li>Launch membership plan for uninsured patients</li>
                      <li>Implement new marketing campaign for high-value services</li>
                      <li>Review and optimize procedure times to increase daily production</li>
                      <li>Add online payment options through patient portal</li>
                    </ul>
                  </div>
                  
                  <div className="space-y-2">
                    <h4 className="font-medium">Long-term (6-12 months)</h4>
                    <ul className="text-sm space-y-1 list-disc pl-4">
                      <li>Evaluate adding new service line(s) based on demand analysis</li>
                      <li>Consider adding associate dentist to expand capacity</li>
                      <li>Review and optimize insurance participation strategy</li>
                      <li>Implement AI-driven treatment planning to improve case acceptance</li>
                    </ul>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </TabsContent>
        
        <TabsContent value="profitability">
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">Revenue</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold">
                    ${profitability?.revenue.toLocaleString() || "0"}
                  </div>
                  <p className="text-xs text-muted-foreground">
                    Total revenue for {currentYear}
                  </p>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">Expenses</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold">
                    ${profitability?.totalExpenses.toLocaleString() || "0"}
                  </div>
                  <p className="text-xs text-muted-foreground">
                    Total expenses for {currentYear}
                  </p>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">Profit Margin</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold">
                    {profitability?.profitMargin.toFixed(1) || "0"}%
                  </div>
                  <p className="text-xs text-muted-foreground">
                    Net profit margin for {currentYear}
                  </p>
                </CardContent>
              </Card>
            </div>
            
            <Card>
              <CardHeader>
                <CardTitle>Expense Breakdown</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="h-80">
                    <PieChartComponent data={profitabilityData} />
                  </div>
                  
                  <div>
                    <h4 className="font-medium mb-4">Expense Categories</h4>
                    <div className="space-y-4">
                      {profitability?.expenses && Object.entries(profitability.expenses).map(([category, amount]) => {
                        // Format category name for display
                        const formattedCategory = category
                          .replace(/([A-Z])/g, ' $1')
                          .replace(/^./, str => str.toUpperCase());
                        
                        const percentage = (amount as number / profitability.totalExpenses) * 100;
                        
                        return (
                          <div key={category} className="flex items-center justify-between">
                            <div className="flex items-center gap-2">
                              <div className="w-3 h-3 rounded-full bg-primary" />
                              <span>{formattedCategory}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <span className="text-sm font-medium">
                                ${(amount as number).toLocaleString()}
                              </span>
                              <span className="text-xs text-muted-foreground">
                                ({percentage.toFixed(1)}%)
                              </span>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>Profitability Analysis</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <h3 className="text-lg font-medium mb-2">Key Metrics</h3>
                      <ul className="space-y-2">
                        <li className="flex justify-between">
                          <span className="text-muted-foreground">Revenue Per Active Patient:</span>
                          <span className="font-medium">$845</span>
                        </li>
                        <li className="flex justify-between">
                          <span className="text-muted-foreground">Production Per Hour:</span>
                          <span className="font-medium">$425</span>
                        </li>
                        <li className="flex justify-between">
                          <span className="text-muted-foreground">Collection Ratio:</span>
                          <span className="font-medium">96.5%</span>
                        </li>
                        <li className="flex justify-between">
                          <span className="text-muted-foreground">Staff Expense Ratio:</span>
                          <span className="font-medium">25%</span>
                        </li>
                      </ul>
                    </div>
                    
                    <div>
                      <h3 className="text-lg font-medium mb-2">Industry Benchmarks</h3>
                      <ul className="space-y-2">
                        <li className="flex justify-between">
                          <span className="text-muted-foreground">Average Profit Margin:</span>
                          <span className="font-medium">30-35%</span>
                        </li>
                        <li className="flex justify-between">
                          <span className="text-muted-foreground">Staff Expenses:</span>
                          <span className="font-medium">23-27%</span>
                        </li>
                        <li className="flex justify-between">
                          <span className="text-muted-foreground">Supplies:</span>
                          <span className="font-medium">5-7%</span>
                        </li>
                        <li className="flex justify-between">
                          <span className="text-muted-foreground">Lab Fees:</span>
                          <span className="font-medium">7-10%</span>
                        </li>
                      </ul>
                    </div>
                  </div>
                  
                  <div className="pt-4 border-t">
                    <h3 className="text-lg font-medium mb-2">Recommendations</h3>
                    <ul className="space-y-2 list-disc pl-5">
                      <li>
                        <span className="font-medium">Review supply ordering process</span>
                        <p className="text-sm text-muted-foreground">
                          Current supply costs are 12% of revenue, which is above industry benchmarks.
                          Consider inventory management system and negotiating with suppliers.
                        </p>
                      </li>
                      <li>
                        <span className="font-medium">Evaluate insurance participation</span>
                        <p className="text-sm text-muted-foreground">
                          Insurance write-offs are impacting profitability. Consider dropping low-reimbursing plans
                          or implementing a fee-for-service strategy with financing options.
                        </p>
                      </li>
                      <li>
                        <span className="font-medium">Implement procedure time analysis</span>
                        <p className="text-sm text-muted-foreground">
                          Production per hour can be improved through better scheduling and procedure protocols.
                          Target increasing production per hour by 10%.
                        </p>
                      </li>
                    </ul>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}
