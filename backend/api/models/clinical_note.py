from sqlalchemy import Column, String, DateTime, Text, ForeignKey, JSON, Enum
from sqlalchemy.dialects.postgresql import UUID
import uuid
from datetime import datetime
import enum
from typing import Optional

from ..database import Base

class NoteType(str, enum.Enum):
    """Enum for clinical note types"""
    EXAMINATION = "examination"
    FINDINGS = "findings"
    PROCEDURE = "procedure"
    TREATMENT_PLAN = "treatment_plan"
    FOLLOWUP = "followup"
    GENERAL = "general"

class NoteStatus(str, enum.Enum):
    """Enum for clinical note status"""
    DRAFT = "draft"
    FINAL = "final"
    AMENDED = "amended"
    DELETED = "deleted"

class ClinicalNote(Base):
    """
    SQLAlchemy model for clinical notes
    """
    __tablename__ = "clinical_notes"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    patient_id = Column(String, nullable=False, index=True)
    title = Column(String, nullable=False)
    type = Column(Enum(NoteType), nullable=False, default=NoteType.GENERAL)
    content = Column(Text, nullable=False)
    metadata = Column(JSON, nullable=True)
    created_at = Column(DateTime, nullable=False, default=datetime.utcnow)
    updated_at = Column(DateTime, nullable=True, onupdate=datetime.utcnow)
    status = Column(Enum(NoteStatus), nullable=False, default=NoteStatus.DRAFT)
    approved_by = Column(String, nullable=True)
    approved_at = Column(DateTime, nullable=True)
    
    # Relationships (if needed)
    # provider = relationship("Provider", back_populates="notes")
    
    def __repr__(self):
        return f"<ClinicalNote {self.id}: {self.title} ({self.type})>"
    
    @property
    def is_finalized(self) -> bool:
        """
        Check if the note is finalized
        
        Returns:
            True if the note is finalized, False otherwise
        """
        return self.status == NoteStatus.FINAL
    
    @property
    def source(self) -> Optional[str]:
        """
        Get the source of the note from metadata
        
        Returns:
            The source of the note if available, None otherwise
        """
        if self.metadata and "source" in self.metadata:
            return self.metadata["source"]
        return None
    
    @property
    def is_ai_generated(self) -> bool:
        """
        Check if the note was generated by AI
        
        Returns:
            True if the note was generated by AI, False otherwise
        """
        return self.source in ["ai_findings", "ai_treatment_plan", "ai_summary"] 